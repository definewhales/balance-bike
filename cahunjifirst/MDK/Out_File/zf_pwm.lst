C51 COMPILER V9.57.0.0   ZF_PWM                                                            04/28/2021 20:58:25 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE ZF_PWM
OBJECT MODULE PLACED IN .\Out_File\zf_pwm.obj
COMPILER INVOKED BY: E:\keil5\anzhuang\C51\BIN\C51.EXE ..\..\Libraries\seekfree_libraries\zf_pwm.c LARGE OMF2 OPTIMIZE(8
                    -,SPEED) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;.
                    -.\USER\inc;..\USER\src;..\CODE;.\HARDWORE\Data;.\HARDWORE\DianGan;.\HARDWORE\FusionAngle;.\HARDWORE\BianMaQi;.\HARDWORE\
                    -ShangWeiJi;.\HARDWORE;.\HARDWORE\Balance;.\KaErMan) DEBUG PRINT(.\Out_File\zf_pwm.lst) TABS(2) OBJECT(.\Out_File\zf_pwm.
                    -obj)

line level    source

   1          /*********************************************************************************************************
             -************
   2           * COPYRIGHT NOTICE
   3           * Copyright (c) 2020,逐飞科技
   4           * All rights reserved.
   5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
   6           *
   7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
   8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
   9           *
  10           * @file          pwm
  11           * @company       成都逐飞科技有限公司
  12           * @author        逐飞科技(QQ790875685)
  13           * @version       查看doc内version文件 版本说明
  14           * @Software    MDK5.27
  15           * @Target core   STC8H8K64S4
  16           * @Taobao      https://seekfree.taobao.com/
  17           * @date          2020-4-14
  18           *********************************************************************************************************
             -***********/
  19          
  20          #include "zf_pwm.h"
  21          #include "board.h"
  22          #include "zf_gpio.h"
  23          #include "zf_uart.h"
  24          #include "stdio.h"
  25          
  26          
  27          
  28          #define PWM1_CCMR1_ADDR  0xfec8 //CCMR2_ADDR = CCMR1_ADDR + 1
  29          #define PWM1_CCR1_ADDR   0xfed5 //CCR2_ADDR = CCR1_ADDR + 2
  30          #define PWM1_CCER1_ADDR  0xfecc //CCER2_ADDR = CCER1_ADDR + 1
  31          
  32          #define PWM2_CCMR1_ADDR  0xfee8 //CCMR2_ADDR = CCMR1_ADDR + 1
  33          #define PWM2_CCR1_ADDR   0xfef5 //CCR2_ADDR = CCR1_ADDR + 2
  34          #define PWM2_CCER1_ADDR  0xfeec //CCER2_ADDR = CCER1_ADDR + 1
  35          
  36          //--------------------------------------------------------------------------------------------------------
             ------------
  37          //  @brief      PWM_gpio初始化（内部使用用户无需关心）
  38          //  @param      pwmch       PWM通道号及引脚
  39          //  @return     void
  40          //  Sample usage:           
  41          //--------------------------------------------------------------------------------------------------------
             ------------
  42          void pwm_set_gpio(PWMCH_enum pwmch)
  43          {
  44   1        switch(pwmch)
  45   1        {
  46   2          case PWM1P_P10:
  47   2          {
C51 COMPILER V9.57.0.0   ZF_PWM                                                            04/28/2021 20:58:25 PAGE 2   

  48   3            gpio_mode(P1_0,GPO_PP);
  49   3            break;
  50   3          }
  51   2          case PWM1N_P11:
  52   2          {
  53   3            gpio_mode(P1_1,GPO_PP);
  54   3            break;
  55   3          }
  56   2          case PWM1P_P20:
  57   2          {
  58   3            gpio_mode(P2_0,GPO_PP);
  59   3            break;
  60   3          }
  61   2          case PWM1N_P21:
  62   2          {
  63   3            gpio_mode(P2_1,GPO_PP);
  64   3            break;
  65   3          }
  66   2          case PWM1P_P60:
  67   2          {
  68   3            gpio_mode(P6_0,GPO_PP);
  69   3            break;
  70   3          }
  71   2          case PWM1N_P61:
  72   2          {
  73   3            gpio_mode(P6_1,GPO_PP);
  74   3            break;
  75   3          }
  76   2          
  77   2          case PWM2P_P12:
  78   2          {
  79   3            gpio_mode(P1_2,GPO_PP);
  80   3            break;
  81   3          }
  82   2          case PWM2N_P13:
  83   2          {
  84   3            gpio_mode(P1_3,GPO_PP);
  85   3            break;
  86   3          }
  87   2          case PWM2P_P22:
  88   2          {
  89   3            gpio_mode(P2_2,GPO_PP);
  90   3            break;
  91   3          }
  92   2          case PWM2N_P23:
  93   2          {
  94   3            gpio_mode(P2_3,GPO_PP);
  95   3            break;
  96   3          }
  97   2          case PWM2P_P62:
  98   2          {
  99   3            gpio_mode(P6_2,GPO_PP);
 100   3            break;
 101   3          }
 102   2          case PWM2N_P63:
 103   2          {
 104   3            gpio_mode(P6_3,GPO_PP);
 105   3            break;
 106   3          }
 107   2          
 108   2          case PWM3P_P14:
 109   2          {
C51 COMPILER V9.57.0.0   ZF_PWM                                                            04/28/2021 20:58:25 PAGE 3   

 110   3            gpio_mode(P1_4,GPO_PP);
 111   3            break;
 112   3          }
 113   2          case PWM3N_P15:
 114   2          {
 115   3            gpio_mode(P1_5,GPO_PP);
 116   3            break;
 117   3          }
 118   2          case PWM3P_P24:
 119   2          {
 120   3            gpio_mode(P2_4,GPO_PP);
 121   3            break;
 122   3          }
 123   2          case PWM3N_P25:
 124   2          {
 125   3            gpio_mode(P2_5,GPO_PP);
 126   3            break;
 127   3          }
 128   2          case PWM3P_P64:
 129   2          {
 130   3            gpio_mode(P6_4,GPO_PP);
 131   3            break;
 132   3          }
 133   2          case PWM3N_P65:
 134   2          {
 135   3            gpio_mode(P6_5,GPO_PP);
 136   3            break;
 137   3          }
 138   2          
 139   2          
 140   2          case PWM4P_P16:
 141   2          {
 142   3            gpio_mode(P1_6,GPO_PP);
 143   3            break;
 144   3          }
 145   2          case PWM4N_P17:
 146   2          {
 147   3            gpio_mode(P1_7,GPO_PP);
 148   3            break;
 149   3          }
 150   2          case PWM4P_P26:
 151   2          {
 152   3            gpio_mode(P2_6,GPO_PP);
 153   3            break;
 154   3          }
 155   2          case PWM4N_P27:
 156   2          {
 157   3            gpio_mode(P2_7,GPO_PP);
 158   3            break;
 159   3          }
 160   2          case PWM4P_P66:
 161   2          {
 162   3            gpio_mode(P6_6,GPO_PP);
 163   3            break;
 164   3          }
 165   2          case PWM4N_P67:
 166   2          {
 167   3            gpio_mode(P6_7,GPO_PP);
 168   3            break;
 169   3          }
 170   2          case PWM4P_P34:
 171   2          {
C51 COMPILER V9.57.0.0   ZF_PWM                                                            04/28/2021 20:58:25 PAGE 4   

 172   3            gpio_mode(P3_4,GPO_PP);
 173   3            break;
 174   3          }
 175   2          case PWM4N_P33:
 176   2          {
 177   3            gpio_mode(P3_3,GPO_PP);
 178   3            break;
 179   3          }
 180   2          
 181   2          
 182   2          case PWM5_P20:
 183   2          {
 184   3            gpio_mode(P2_0,GPO_PP);
 185   3            break;
 186   3          }
 187   2          case PWM5_P17:
 188   2          {
 189   3            gpio_mode(P1_7,GPO_PP);
 190   3            break;
 191   3          }
 192   2          case PWM5_P00:
 193   2          {
 194   3            gpio_mode(P0_0,GPO_PP);
 195   3            break;
 196   3          }
 197   2          case PWM5_P74:
 198   2          {
 199   3            gpio_mode(P7_4,GPO_PP);
 200   3            break;
 201   3          }
 202   2          
 203   2          case PWM6_P21:
 204   2          {
 205   3            gpio_mode(P2_1,GPO_PP);
 206   3            break;
 207   3          }
 208   2          case PWM6_P54:
 209   2          {
 210   3            gpio_mode(P5_4,GPO_PP);
 211   3            break;
 212   3          }
 213   2          case PWM6_P01:
 214   2          {
 215   3            gpio_mode(P0_1,GPO_PP);
 216   3            break;
 217   3          }
 218   2          case PWM6_P75:
 219   2          {
 220   3            gpio_mode(P7_5,GPO_PP);
 221   3            break;
 222   3          }
 223   2      
 224   2          
 225   2          case PWM7_P22:
 226   2          {
 227   3            gpio_mode(P2_2,GPO_PP);
 228   3            break;
 229   3          }
 230   2          case PWM7_P33:
 231   2          {
 232   3            gpio_mode(P3_3,GPO_PP);
 233   3            break;
C51 COMPILER V9.57.0.0   ZF_PWM                                                            04/28/2021 20:58:25 PAGE 5   

 234   3          }
 235   2          case PWM7_P02:
 236   2          {
 237   3            gpio_mode(P0_2,GPO_PP);
 238   3            break;
 239   3          }
 240   2          case PWM7_P76:
 241   2          {
 242   3            gpio_mode(P7_6,GPO_PP);
 243   3            break;
 244   3          }
 245   2      
 246   2          
 247   2          case PWM8_P23:
 248   2          {
 249   3            gpio_mode(P2_3,GPO_PP);
 250   3            break;
 251   3          }
 252   2          case PWM8_P34:
 253   2          {
 254   3            gpio_mode(P3_4,GPO_PP);
 255   3            break;
 256   3          }
 257   2          case PWM8_P03:
 258   2          {
 259   3            gpio_mode(P0_3,GPO_PP);
 260   3            break;
 261   3          }
 262   2          case PWM8_P77:
 263   2          {
 264   3            gpio_mode(P7_7,GPO_PP);
 265   3            break;
 266   3          }
 267   2          
 268   2        }
 269   1        
 270   1      }
 271            
 272            
 273          //--------------------------------------------------------------------------------------------------------
             ------------
 274          //  @brief      PWM初始化
 275          //  @param      pwmch       PWM通道号及引脚
 276          //  @param      freq        PWM频率(64Hz-3MHz)
 277          //  @param      duty        PWM占空比
 278          //  @return     void
 279          //  Sample usage:           
 280          //              pwm_init(PWM0_P00, 100, 5000);     //初始化PWM0  使用引脚P0.0  输出PWM频率100HZ   占空比为百分之 
             -5000/PWM_DUTY_MAX*100
 281          //              PWM_DUTY_MAX在zf_pwm.h文件中 默认为10000
 282          //--------------------------------------------------------------------------------------------------------
             ------------
 283          void pwm_init(PWMCH_enum pwmch,uint32 freq, uint16 duty)
 284          {
 285   1        
 286   1        uint16 match_temp;
 287   1        uint16 period_temp; 
 288   1        uint16 freq_div = 0;
 289   1        
 290   1        P_SW2 |= 0x80;
 291   1        
 292   1        //GPIO需要设置为推挽输出
C51 COMPILER V9.57.0.0   ZF_PWM                                                            04/28/2021 20:58:25 PAGE 6   

 293   1        pwm_set_gpio(pwmch);
 294   1      
 295   1      
 296   1        
 297   1        //分频计算，周期计算，占空比计算
 298   1        freq_div = (sys_clk / freq) >> 16;              //多少分频
 299   1        period_temp = sys_clk / freq / (freq_div + 1) - 1;      //周期
 300   1        match_temp = period_temp * ((float)duty / PWM_DUTY_MAX);  //占空比
 301   1        
 302   1        
 303   1        
 304   1        if(PWM5_P20 <= pwmch)       //PWM5-8
 305   1        {
 306   2          
 307   2          
 308   2          //通道选择，引脚选择
 309   2          PWM2_ENO |= (1 << ((2 * ((pwmch >> 4) - 4))));          //使能通道  
 310   2          PWM2_PS |= ((pwmch & 0x03) << ((2 * ((pwmch >> 4) - 4))));    //输出脚选择
 311   2          
 312   2      //    // 配置通道输出使能和极性 
 313   2          (*(unsigned char volatile xdata *)(PWM2_CCER1_ADDR + (((pwmch >> 4) - 4) >> 1))) |= (1 << (((pwmch >> 4)
             - & 0x01) * 4));
 314   2          
 315   2          //功能设置
 316   2          (*(unsigned char volatile xdata *)(PWM2_CCMR1_ADDR + ((pwmch >> 4) - 4))) |= 0x06<<4; //设置为PWM模式1
 317   2          (*(unsigned char volatile xdata *)(PWM2_CCMR1_ADDR + ((pwmch >> 4) - 4))) |= 1<<3;    //开启PWM2_CCR1 寄存
             -器的预装载功能
 318   2          
 319   2          //周期
 320   2          PWM2_ARR = period_temp;
 321   2          //设置预分频
 322   2          PWM2_PSCR = freq_div;
 323   2          //设置捕获值|比较值
 324   2          (*(unsigned int volatile xdata *)(PWM2_CCR1_ADDR + 2 * ((pwmch >> 4) - 4))) = match_temp;
 325   2          
 326   2          PWM2_BKR = 0x80;  //主输出使能 相当于总开关
 327   2          PWM2_CR1 = 0x01;  //PWM开始计数
 328   2          
 329   2        }
 330   1        else
 331   1        {
 332   2          PWM1_ENO |= (1 << (pwmch & 0x01)) << ((pwmch >> 4) * 2);  //使能通道  
 333   2          PWM1_PS  |= ((pwmch & 0x07) >> 1) << ((pwmch >> 4) * 2);    //输出脚选择
 334   2      
 335   2          
 336   2          // 配置通道输出使能和极性
 337   2          (*(unsigned char volatile xdata *)(PWM1_CCER1_ADDR + (pwmch >> 5))) |= (1 << ((pwmch & 0x01) * 2 + ((pwm
             -ch >> 4) & 0x01) * 0x04));
 338   2            
 339   2          
 340   2          (*(unsigned char volatile xdata *)(PWM1_CCMR1_ADDR + (pwmch >> 4))) |= 0x06<<4;   //设置为PWM模式1
 341   2          (*(unsigned char volatile xdata *)(PWM1_CCMR1_ADDR + (pwmch >> 4))) |= 1<<3;    //开启PWM1_CCR1 寄存器的预
             -装载功能
 342   2          
 343   2          //周期
 344   2          PWM1_ARR = period_temp;
 345   2          //设置预分频
 346   2          PWM1_PSCR = freq_div;
 347   2          //设置捕获值|比较值
 348   2          (*(unsigned int volatile xdata *)(PWM1_CCR1_ADDR + 2 * (pwmch >> 4))) = match_temp;
 349   2          
 350   2          PWM1_BKR = 0x80;  // 主输出使能 相当于总开关
C51 COMPILER V9.57.0.0   ZF_PWM                                                            04/28/2021 20:58:25 PAGE 7   

 351   2          PWM1_CR1 = 0x01;  //PWM开始计数
 352   2          
 353   2        }
 354   1      
 355   1      //  P_SW2 &= 0x7F;
 356   1      
 357   1      }
 358          
 359          //--------------------------------------------------------------------------------------------------------
             ------------
 360          //  @brief      PWM占空比设置
 361          //  @param      pwmch       PWM通道号及引脚
 362          //  @param      duty        PWM占空比
 363          //  @return     void
 364          //  Sample usage:           pwm_duty(PWM0_P00, 5000);     //初始化PWM0  使用引脚P0.0  输出PWM频率50HZ   占
             -空比为百分之 5000/PWM_DUTY_MAX*100
 365          //              PWM_DUTY_MAX在fsl_pwm.h文件中 默认为10000
 366          //--------------------------------------------------------------------------------------------------------
             ------------
 367          void pwm_duty(PWMCH_enum pwmch, uint16 duty)
 368          {
 369   1        uint16 match_temp;
 370   1        
 371   1      //  P_SW2 |= 0x80;
 372   1        if(PWM5_P20 <= pwmch)       //PWM5-8
 373   1        {
 374   2          match_temp = (uint16)(PWM2_ARR * ((float)duty/PWM_DUTY_MAX));       //占空比
 375   2          (*(unsigned int volatile xdata *)(PWM2_CCR1_ADDR + 2 * ((pwmch >> 4) - 4))) = match_temp;
 376   2        }
 377   1        else
 378   1        {
 379   2          match_temp = (uint16)(PWM1_ARR * ((float)duty/PWM_DUTY_MAX));       //占空比
 380   2          (*(unsigned int volatile xdata *)(PWM1_CCR1_ADDR + 2 * (pwmch >> 4))) = match_temp;
 381   2        }
 382   1        
 383   1      
 384   1      //  P_SW2 &= ~0x80;
 385   1        
 386   1      }
 387          
 388          
 389          //--------------------------------------------------------------------------------------------------------
             ------------
 390          //  @brief      PWM频率设置
 391          //  @param      pwmch       PWM通道号及引脚
 392          //  @param      freq        PWM频率
 393          //  @param      duty        PWM占空比
 394          //  @return     void
 395          //  Sample usage:           pwm_freq(PWM0_P00, 50, 5000);     //修改化PWM0  使用引脚P0.0  输出PWM频率50HZ 
             -  占空比为百分之 5000/PWM_DUTY_MAX*100
 396          //--------------------------------------------------------------------------------------------------------
             ------------
 397          void pwm_freq(PWMCH_enum pwmch, uint32 freq, uint16 duty)
 398          {
 399   1        uint32 match_temp;
 400   1          uint32 period_temp; 
 401   1        uint8 freq_div = 0;
 402   1        
 403   1        freq_div = (sys_clk/freq)>>15;                //预分频值
 404   1        period_temp = sys_clk/freq/(freq_div + 1);          //周期
 405   1        match_temp = period_temp*((float)duty/PWM_DUTY_MAX);  //占空比
 406   1        
C51 COMPILER V9.57.0.0   ZF_PWM                                                            04/28/2021 20:58:25 PAGE 8   

 407   1      //  P_SW2 |= 0x80;
 408   1        
 409   1        
 410   1        if(PWM5_P20 <= pwmch)       //PWM5-8
 411   1        {
 412   2          //周期
 413   2          PWM2_ARR = period_temp;
 414   2          //设置预分频
 415   2          PWM2_PSCR = freq_div;
 416   2          //设置捕获值|比较值
 417   2          (*(unsigned int volatile xdata *)(PWM2_CCR1_ADDR + 2 * ((pwmch >> 4) - 4))) = match_temp;
 418   2        }
 419   1        else
 420   1        {
 421   2          //周期
 422   2          PWM1_ARR = period_temp;
 423   2          //设置预分频
 424   2          PWM1_PSCR = freq_div;
 425   2          //设置捕获值|比较值
 426   2          (*(unsigned int volatile xdata *)(PWM1_CCR1_ADDR + 2 * (pwmch >> 4))) = match_temp;
 427   2        }
 428   1        
 429   1      //  P_SW2 &= ~0x80;
 430   1      }
 431          
 432          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1597    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      32
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

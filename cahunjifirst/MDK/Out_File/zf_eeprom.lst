C51 COMPILER V9.57.0.0   ZF_EEPROM                                                         04/28/2021 20:58:25 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE ZF_EEPROM
OBJECT MODULE PLACED IN .\Out_File\zf_eeprom.obj
COMPILER INVOKED BY: E:\keil5\anzhuang\C51\BIN\C51.EXE ..\..\Libraries\seekfree_libraries\zf_eeprom.c LARGE OMF2 OPTIMIZ
                    -E(8,SPEED) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_periphera
                    -l;..\USER\inc;..\USER\src;..\CODE;.\HARDWORE\Data;.\HARDWORE\DianGan;.\HARDWORE\FusionAngle;.\HARDWORE\BianMaQi;.\HARDWO
                    -RE\ShangWeiJi;.\HARDWORE;.\HARDWORE\Balance;.\KaErMan) DEBUG PRINT(.\Out_File\zf_eeprom.lst) TABS(2) OBJECT(.\Out_File\z
                    -f_eeprom.obj)

line level    source

   1          /*********************************************************************************************************
             -************
   2           * COPYRIGHT NOTICE
   3           * Copyright (c) 2020,逐飞科技
   4           * All rights reserved.
   5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
   6           *
   7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
   8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
   9           *
  10           * @file          eeprom
  11           * @company       成都逐飞科技有限公司
  12           * @author        逐飞科技(QQ790875685)
  13           * @version       查看doc内version文件 版本说明
  14           * @Software    MDK FOR C51 V9.60
  15           * @Target core   STC8H8K64S4
  16           * @Taobao      https://seekfree.taobao.com/
  17           * @date          2020-4-14
  18           *********************************************************************************************************
             -***********/
  19          #include "zf_eeprom.h"
  20          #include "board.h"
  21          #include "intrins.h"
  22          
  23          //--------------------------------------------------------------------------------------------------------
             ------------
  24          //  @brief      初始化EEPROM
  25          //  @param      NULL
  26          //  @return     void
  27          //  Sample usage:           
  28          //--------------------------------------------------------------------------------------------------------
             ------------
  29          void iap_init(void)
  30          {
  31   1        IAP_CONTR |= 1<<7;    //使能EEPROM操作
  32   1        iap_set_tps();      //设置擦除等待时间
  33   1      }
  34          
  35          //--------------------------------------------------------------------------------------------------------
             ------------
  36          //  @brief      关闭EEPROM
  37          //  @param      NULL
  38          //  @return     void
  39          //  Sample usage:           
  40          //--------------------------------------------------------------------------------------------------------
             ------------
  41          void iap_idle(void)
  42          {
  43   1        IAP_CONTR &= ~(1<<7);//失能EEPROM操作
  44   1      }
  45          
C51 COMPILER V9.57.0.0   ZF_EEPROM                                                         04/28/2021 20:58:25 PAGE 2   

  46          
  47          //--------------------------------------------------------------------------------------------------------
             ------------
  48          //  @brief      获取EEPROM操作失败状态位，需要软件清零
  49          //  @param      NULL
  50          //  @return     void
  51          //  Sample usage:           
  52          //                操作失败返回1;
  53          //--------------------------------------------------------------------------------------------------------
             ------------
  54          uint8 iap_get_cmd_state(void)
  55          {
  56   1        return ((IAP_CONTR&0x01) == 0x01);
  57   1      }
  58          
  59          
  60          //--------------------------------------------------------------------------------------------------------
             ------------
  61          //  @brief      设置IAP等待时间
  62          //  @param      NULL
  63          //  @return     void
  64          //  Sample usage:           
  65          //--------------------------------------------------------------------------------------------------------
             ------------
  66          void iap_set_tps(void)
  67          {
  68   1        uint8 write_time;
  69   1        write_time = (sys_clk / 1000000) + 1;
  70   1        IAP_TPS = write_time;
  71   1      }
  72          
  73          
  74          //--------------------------------------------------------------------------------------------------------
             ------------
  75          //  @brief      EEPROM读取多个字节
  76          //  @param      addr      需要读取的eeprom地址
  77          //  @param      *buf      需要读取的数据地址
  78          //  @param      len       需要读取的数据长度
  79          //  @return     void
  80          //  Sample usage:               uint8 str[10];
  81          //                iap_read_bytes(0x00,str,10);
  82          //                将0x00-0x0A地址中的数据，读取到str中。
  83          //--------------------------------------------------------------------------------------------------------
             ------------
  84          void iap_read_bytes(uint16 addr, uint8 *buf, uint16 len)
  85          {
  86   1        IAP_CMD = 1;        //设置 IAP 读命令 
  87   1      
  88   1        while(len--)
  89   1        {
  90   2          IAP_ADDRL = addr;     //设置 IAP 低地址
  91   2          IAP_ADDRH = addr >> 8;  //设置 IAP 高地址
  92   2          IAP_TRIG = 0x5a;    //写触发命令(0x5a)
  93   2          IAP_TRIG = 0xa5;    //写触发命令(0xa5)  
  94   2          *buf++ = IAP_DATA;    //读 IAP 数据
  95   2          addr++;
  96   2          _nop_(); 
  97   2        }
  98   1      }
  99          
 100          
 101          //--------------------------------------------------------------------------------------------------------
C51 COMPILER V9.57.0.0   ZF_EEPROM                                                         04/28/2021 20:58:25 PAGE 3   

             ------------
 102          //  @brief      EEPROM写多个字节
 103          //  @param      addr      需要写的eeprom地址
 104          //  @param      *buf      需要写的数据地址
 105          //  @param      len       需要写的数据长度
 106          //  @return     void
 107          //  Sample usage:           iap_write_bytes(0x00,(uint8 *)"0123456789",10);
 108          //                将"0123456789"写入0x00-0x0A地址中;
 109          //--------------------------------------------------------------------------------------------------------
             ------------
 110          void iap_write_bytes(uint16 addr, uint8 *buf, uint16 len)
 111          {
 112   1        IAP_CMD = 2;        //设置 IAP 读命令 
 113   1        
 114   1        while(len--)
 115   1        {
 116   2          IAP_ADDRL = addr;     //设置 IAP 低地址
 117   2          IAP_ADDRH = addr >> 8;  //设置 IAP 高地址
 118   2          IAP_DATA = *buf++;    //写 IAP 数据
 119   2          addr++;
 120   2      
 121   2          IAP_TRIG = 0x5a;    //写触发命令(0x5a)
 122   2          IAP_TRIG = 0xa5;    //写触发命令(0xa5)
 123   2          _nop_(); 
 124   2        }
 125   1      }
 126          
 127          
 128          
 129          //--------------------------------------------------------------------------------------------------------
             ------------
 130          //  @brief      EEPROM擦除目标地址所在的一页（1扇区/512字节）
 131          //  @param      addr      需要写的eeprom地址
 132          //  @return     void
 133          //  Sample usage:           iap_erase(0x20);
 134          //                擦除0x00-0x200的数据
 135          //--------------------------------------------------------------------------------------------------------
             ------------
 136          void iap_erase_page(uint16 addr) 
 137          { 
 138   1        IAP_CMD = 3;        //设置 IAP 擦命除令
 139   1        IAP_ADDRL = addr;       //设置 IAP 低地址
 140   1        IAP_ADDRH = addr >> 8;    //设置 IAP 高地址
 141   1        IAP_TRIG = 0x5a;      //写触发命令(0x5a)
 142   1        IAP_TRIG = 0xa5;      //写触发命令(0xa5)
 143   1        _nop_(); 
 144   1      }
 145          
 146          
 147          
 148          //--------------------------------------------------------------------------------------------------------
             ------------
 149          //  @brief      扩展EEPROM写多个字节(无需擦除)
 150          //  @param      addr      需要写的eeprom地址
 151          //  @param      *buf      需要写的数据地址
 152          //  @param      len       需要写的数据长度
 153          //  @return     void
 154          //  Sample usage:           extern_iap_write_bytes(0x0000,(uint8 *)"0123456789";,10);
 155          //                将"0123456789"写入0x00-0x0A地址中;
 156          //  @note：           不要跨扇区使用。
 157          //                addr地址：0-511为一个扇区,512-1023为一个扇区，1024-1035为一个扇区，依次类推。
 158          //--------------------------------------------------------------------------------------------------------
C51 COMPILER V9.57.0.0   ZF_EEPROM                                                         04/28/2021 20:58:25 PAGE 4   

             ------------
 159          void extern_iap_write_bytes(uint16 addr, uint8 *buf, uint16 len)
 160          { 
 161   1        uint8 temp[512];
 162   1        uint16 i;
 163   1        
 164   1        for(i=0; i<512 ;i++)  temp[i] = 0;      //清0
 165   1        iap_read_bytes(addr&0xFE00, temp, 512);     //读取
 166   1        for(i=0; i<len; i++)  temp[(addr&0x1FF) + i] = buf[i];  //改
 167   1        iap_erase_page(addr);             //擦除
 168   1        iap_write_bytes(addr&0xFE00, temp, 512);    //写入
 169   1      }
 170          
 171          
 172          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    441    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----     535
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

C51 COMPILER V9.57.0.0   SEEKFREE_18TFT                                                    04/28/2021 20:58:26 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE SEEKFREE_18TFT
OBJECT MODULE PLACED IN .\Out_File\SEEKFREE_18TFT.obj
COMPILER INVOKED BY: E:\keil5\anzhuang\C51\BIN\C51.EXE ..\..\Libraries\seekfree_peripheral\SEEKFREE_18TFT.c LARGE OMF2 O
                    -PTIMIZE(8,SPEED) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_per
                    -ipheral;..\USER\inc;..\USER\src;..\CODE;.\HARDWORE\Data;.\HARDWORE\DianGan;.\HARDWORE\FusionAngle;.\HARDWORE\BianMaQi;.\
                    -HARDWORE\ShangWeiJi;.\HARDWORE;.\HARDWORE\Balance;.\KaErMan) DEBUG PRINT(.\Out_File\SEEKFREE_18TFT.lst) TABS(2) OBJECT(.
                    -\Out_File\SEEKFREE_18TFT.obj)

line level    source

   1          /*********************************************************************************************************
             -************
   2           * COPYRIGHT NOTICE
   3           * Copyright (c) 2018,逐飞科技
   4           * All rights reserved.
   5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897
   6           *
   7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
   8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
   9           *
  10           * @file          TFT
  11           * @company       成都逐飞科技有限公司
  12           * @author        逐飞科技(QQ3184284598)
  13           * @version       查看doc内version文件 版本说明
  14           * @Software    MDK FOR C51 V9.60
  15           * @Taobao      https://seekfree.taobao.com/
  16           * @date          2018-05-24
  17           * @note    
  18                    接线定义：
  19                    ------------------------------------ 
  20                    模块管脚            单片机管脚
  21                    SCL                 查看TFT_SCL宏定义的引脚     硬件SPI引脚不可随意切换
  22                    SDA                 查看TFT_SDA宏定义的引脚     硬件SPI引脚不可随意切换
  23                    RES                 查看REST_PIN宏定义的引脚    
  24                    DC                  查看DC_PIN宏定义的引脚  
  25                    CS                  查看TFT_CS宏定义的引脚      硬件SPI引脚不可随意切换
  26                    
  27                    电源引脚
  28                    BL  3.3V电源（背光控制引脚，也可以接PWM来控制亮度）
  29                    VCC 3.3V电源
  30                    GND 电源地
  31                    最大分辨率128*160
  32                    ------------------------------------ 
  33          
  34           *********************************************************************************************************
             -***********/
  35          
  36          
  37          
  38          
  39          
  40          #include "SEEKFREE_18TFT.h"
  41          #include "SEEKFREE_FONT.h"
  42          #include "SEEKFREE_PRINTF.h"
  43          #include "zf_spi.h"
  44          #include "zf_delay.h"
  45          
  46          //--------------------------------------------------------------------------------------------------------
             ------------
  47          //  以下函数是使用软件SPI通信，相比较硬件SPI，软件SPI引脚更加灵活，可以使用任意普通IO
  48          //--------------------------------------------------------------------------------------------------------
C51 COMPILER V9.57.0.0   SEEKFREE_18TFT                                                    04/28/2021 20:58:26 PAGE 2   

             ------------
  49          
  50          
  51          
  52          //--------------------------------------------------------------------------------------------------------
             ------------
  53          //  @brief      内部调用，用户无需关心
  54          //  @param      void        
  55          //  @return             
  56          //  @since      v1.0
  57          //  Sample usage:               
  58          //--------------------------------------------------------------------------------------------------------
             ------------
  59          void lcd_writeIndex_simspi(uint8 dat)     //写命令
  60          { 
  61   1        uint8 i=8;
  62   1        
  63   1          TFT_CS_SIMSPI(0);
  64   1        TFT_DC_SIMSPI(0);
  65   1        TFT_SCL_SIMSPI(0);
  66   1        
  67   1        while(i--)
  68   1        {
  69   2          if(dat&0x80){TFT_SDA_SIMSPI(1);}
  70   2          else{TFT_SDA_SIMSPI(0);}
  71   2          TFT_SCL_SIMSPI(1);
  72   2          
  73   2          TFT_SCL_SIMSPI(0);
  74   2          dat<<=1;
  75   2        } 
  76   1          TFT_CS_SIMSPI(1);
  77   1      }
  78          
  79          //--------------------------------------------------------------------------------------------------------
             ------------
  80          //  @brief      内部调用，用户无需关心
  81          //  @param      void        
  82          //  @return             
  83          //  @since      v1.0
  84          //  Sample usage:               
  85          //--------------------------------------------------------------------------------------------------------
             ------------
  86          void lcd_writeData_simspi(uint8 dat)      //写数据
  87          {
  88   1          uint8 i=8;
  89   1        
  90   1          TFT_CS_SIMSPI(0);
  91   1        TFT_DC_SIMSPI(1);
  92   1        TFT_SCL_SIMSPI(0);
  93   1        while(i--)
  94   1        {
  95   2            if(dat&0x80){TFT_SDA_SIMSPI(1);}
  96   2            else{TFT_SDA_SIMSPI(0);}
  97   2            TFT_SCL_SIMSPI(1);
  98   2          
  99   2            TFT_SCL_SIMSPI(0);
 100   2            dat<<=1;
 101   2        }
 102   1          TFT_CS_SIMSPI(1);
 103   1      }
 104          
 105          //--------------------------------------------------------------------------------------------------------
C51 COMPILER V9.57.0.0   SEEKFREE_18TFT                                                    04/28/2021 20:58:26 PAGE 3   

             ------------
 106          //  @brief      内部调用，用户无需关心
 107          //  @param      void        
 108          //  @return             
 109          //  @since      v1.0
 110          //  Sample usage:               
 111          //--------------------------------------------------------------------------------------------------------
             ------------
 112          void lcd_writeData_16bit_simspi(uint16 dat) //向液晶屏写一个16位数据
 113          {
 114   1        uint8 i=16;
 115   1        
 116   1          TFT_CS_SIMSPI(0);
 117   1          TFT_DC_SIMSPI(1);
 118   1          TFT_SCL_SIMSPI(0);
 119   1        
 120   1        while(i--)
 121   1        {
 122   2            if(dat&0x8000){TFT_SDA_SIMSPI(1);}
 123   2            else{TFT_SDA_SIMSPI(0);}
 124   2            TFT_SCL_SIMSPI(1);
 125   2          
 126   2            TFT_SCL_SIMSPI(0);
 127   2            dat<<=1;
 128   2        }
 129   1        
 130   1          TFT_CS_SIMSPI(1);
 131   1      
 132   1      }
 133          
 134          //--------------------------------------------------------------------------------------------------------
             ------------
 135          //  @brief      液晶坐标设置
 136          //  @param      x_start       坐标x方向的起点
 137          //  @param      y_start       坐标y方向的起点
 138          //  @param      x_end         坐标x方向的终点
 139          //  @param      y_end         坐标y方向的终点
 140          //  @return     void
 141          //  @since      v1.0
 142          //  Sample usage:               lcd_set_region(0,0,10,10);// x、y的起点都是0，终点都是10
 143          //--------------------------------------------------------------------------------------------------------
             ------------
 144          void lcd_set_region_simspi(unsigned int x_start,unsigned int y_start,unsigned int x_end,unsigned int y_end
             -)
 145          { 
 146   1      
 147   1          
 148   1      #if (0 == TFT_DISPLAY_DIR || 1 == TFT_DISPLAY_DIR)
 149   1          lcd_writeIndex_simspi(0x2a);
 150   1        lcd_writeData_simspi(0x00);
 151   1        lcd_writeData_simspi(x_start+2);
 152   1        lcd_writeData_simspi(0x00);
 153   1        lcd_writeData_simspi(x_end+2);
 154   1      
 155   1        lcd_writeIndex_simspi(0x2b);
 156   1        lcd_writeData_simspi(0x00);
 157   1        lcd_writeData_simspi(y_start+1);
 158   1        lcd_writeData_simspi(0x00);
 159   1        lcd_writeData_simspi(y_end+1);  
 160   1      
 161   1      #elif(2 == TFT_DISPLAY_DIR || 3 == TFT_DISPLAY_DIR)
                  lcd_writeIndex_simspi(0x2a);
C51 COMPILER V9.57.0.0   SEEKFREE_18TFT                                                    04/28/2021 20:58:26 PAGE 4   

                lcd_writeData_simspi(0x00);
                lcd_writeData_simspi(x_start+1);
                lcd_writeData_simspi(0x0);
                lcd_writeData_simspi(x_end+1);
              
                lcd_writeIndex_simspi(0x2b);
                lcd_writeData_simspi(0x00);
                lcd_writeData_simspi(y_start+2);
                lcd_writeData_simspi(0x00);
                lcd_writeData_simspi(y_end+2);  
              
              #endif
 175   1          
 176   1          lcd_writeIndex_simspi(0x2c);
 177   1      }
 178          
 179          //--------------------------------------------------------------------------------------------------------
             ------------
 180          //  @brief      液晶清屏函数
 181          //  @param      color         颜色设置
 182          //  @return     void
 183          //  @since      v1.0
 184          //  Sample usage:               lcd_clear(YELLOW);// 全屏设置为黄色
 185          //--------------------------------------------------------------------------------------------------------
             ------------
 186          void lcd_clear_simspi(int color)
 187          {
 188   1        uint8 i,j;
 189   1        lcd_set_region_simspi(0,0,TFT_X_MAX-1,TFT_Y_MAX-1);
 190   1        for (i=0;i<TFT_Y_MAX;i++)
 191   1            for (j=0;j<TFT_X_MAX;j++)
 192   1                lcd_writeData_16bit_simspi(color);
 193   1      }
 194          
 195          
 196          //--------------------------------------------------------------------------------------------------------
             ------------
 197          //  @brief      液晶初始化
 198          //  @return     void
 199          //  @since      v1.0
 200          //  Sample usage:               
 201          //--------------------------------------------------------------------------------------------------------
             ------------
 202          void lcd_init_simspi(void)
 203          { 
 204   1        
 205   1        
 206   1          TFT_REST_SIMSPI(0);
 207   1          delay_ms(10);
 208   1          TFT_REST_SIMSPI(1);
 209   1          delay_ms(120);
 210   1          lcd_writeIndex_simspi(0x11);
 211   1          delay_ms(120);
 212   1      
 213   1          lcd_writeIndex_simspi(0xB1); 
 214   1          lcd_writeData_simspi(0x01); 
 215   1          lcd_writeData_simspi(0x2C); 
 216   1          lcd_writeData_simspi(0x2D); 
 217   1          
 218   1          lcd_writeIndex_simspi(0xB2); 
 219   1          lcd_writeData_simspi(0x01); 
 220   1          lcd_writeData_simspi(0x2C); 
C51 COMPILER V9.57.0.0   SEEKFREE_18TFT                                                    04/28/2021 20:58:26 PAGE 5   

 221   1          lcd_writeData_simspi(0x2D); 
 222   1          
 223   1          lcd_writeIndex_simspi(0xB3); 
 224   1          lcd_writeData_simspi(0x01); 
 225   1          lcd_writeData_simspi(0x2C); 
 226   1          lcd_writeData_simspi(0x2D); 
 227   1          lcd_writeData_simspi(0x01); 
 228   1          lcd_writeData_simspi(0x2C); 
 229   1          lcd_writeData_simspi(0x2D); 
 230   1          
 231   1          lcd_writeIndex_simspi(0xB4);
 232   1          lcd_writeData_simspi(0x07); 
 233   1      
 234   1          lcd_writeIndex_simspi(0xC0); 
 235   1          lcd_writeData_simspi(0xA2); 
 236   1          lcd_writeData_simspi(0x02); 
 237   1          lcd_writeData_simspi(0x84); 
 238   1          lcd_writeIndex_simspi(0xC1); 
 239   1          lcd_writeData_simspi(0xC5); 
 240   1          
 241   1          lcd_writeIndex_simspi(0xC2); 
 242   1          lcd_writeData_simspi(0x0A); 
 243   1          lcd_writeData_simspi(0x00); 
 244   1          
 245   1          lcd_writeIndex_simspi(0xC3); 
 246   1          lcd_writeData_simspi(0x8A); 
 247   1          lcd_writeData_simspi(0x2A); 
 248   1          lcd_writeIndex_simspi(0xC4); 
 249   1          lcd_writeData_simspi(0x8A); 
 250   1          lcd_writeData_simspi(0xEE); 
 251   1          
 252   1          lcd_writeIndex_simspi(0xC5);
 253   1          lcd_writeData_simspi(0x0E); 
 254   1          
 255   1          lcd_writeIndex_simspi(0x36);
 256   1          switch(TFT_DISPLAY_DIR)//y x v
 257   1          {
 258   2              case 0: lcd_writeData_simspi(1<<7 | 1<<6 | 0<<5);  break;  //竖屏模式
 259   2              case 1: lcd_writeData_simspi(0<<7 | 0<<6 | 0<<5);  break;  //竖屏模式  旋转180
 260   2              case 2: lcd_writeData_simspi(1<<7 | 0<<6 | 1<<5);  break;  //横屏模式
 261   2              case 3: lcd_writeData_simspi(0<<7 | 1<<6 | 1<<5);  break;  //横屏模式  旋转180
 262   2          }
 263   1      
 264   1          lcd_writeIndex_simspi(0xe0); 
 265   1          lcd_writeData_simspi(0x0f); 
 266   1          lcd_writeData_simspi(0x1a); 
 267   1          lcd_writeData_simspi(0x0f); 
 268   1          lcd_writeData_simspi(0x18); 
 269   1          lcd_writeData_simspi(0x2f); 
 270   1          lcd_writeData_simspi(0x28); 
 271   1          lcd_writeData_simspi(0x20); 
 272   1          lcd_writeData_simspi(0x22); 
 273   1          lcd_writeData_simspi(0x1f); 
 274   1          lcd_writeData_simspi(0x1b); 
 275   1          lcd_writeData_simspi(0x23); 
 276   1          lcd_writeData_simspi(0x37); 
 277   1          lcd_writeData_simspi(0x00);   
 278   1          lcd_writeData_simspi(0x07); 
 279   1          lcd_writeData_simspi(0x02); 
 280   1          lcd_writeData_simspi(0x10); 
 281   1          
 282   1          lcd_writeIndex_simspi(0xe1); 
C51 COMPILER V9.57.0.0   SEEKFREE_18TFT                                                    04/28/2021 20:58:26 PAGE 6   

 283   1          lcd_writeData_simspi(0x0f); 
 284   1          lcd_writeData_simspi(0x1b); 
 285   1          lcd_writeData_simspi(0x0f); 
 286   1          lcd_writeData_simspi(0x17); 
 287   1          lcd_writeData_simspi(0x33); 
 288   1          lcd_writeData_simspi(0x2c); 
 289   1          lcd_writeData_simspi(0x29); 
 290   1          lcd_writeData_simspi(0x2e); 
 291   1          lcd_writeData_simspi(0x30); 
 292   1          lcd_writeData_simspi(0x30); 
 293   1          lcd_writeData_simspi(0x39); 
 294   1          lcd_writeData_simspi(0x3f); 
 295   1          lcd_writeData_simspi(0x00); 
 296   1          lcd_writeData_simspi(0x07); 
 297   1          lcd_writeData_simspi(0x03); 
 298   1          lcd_writeData_simspi(0x10);  
 299   1          
 300   1          lcd_writeIndex_simspi(0x2a);
 301   1          lcd_writeData_simspi(0x00);
 302   1          lcd_writeData_simspi(0x00+2);
 303   1          lcd_writeData_simspi(0x00);
 304   1          lcd_writeData_simspi(0x80+2);
 305   1          
 306   1          lcd_writeIndex_simspi(0x2b);
 307   1          lcd_writeData_simspi(0x00);
 308   1          lcd_writeData_simspi(0x00+3);
 309   1          lcd_writeData_simspi(0x00);
 310   1          lcd_writeData_simspi(0x80+3);
 311   1          
 312   1          lcd_writeIndex_simspi(0xF0); 
 313   1          lcd_writeData_simspi(0x01); 
 314   1          lcd_writeIndex_simspi(0xF6);
 315   1          lcd_writeData_simspi(0x00); 
 316   1          
 317   1          lcd_writeIndex_simspi(0x3A);
 318   1          lcd_writeData_simspi(0x05); 
 319   1          lcd_writeIndex_simspi(0x29);
 320   1      
 321   1          lcd_clear_simspi(WHITE);//全白
 322   1      }
 323          
 324          //--------------------------------------------------------------------------------------------------------
             ------------
 325          //  @brief      液晶画点
 326          //  @param      x               坐标x方向的起点
 327          //  @param      y               坐标y方向的起点
 328          //  @param      dat             需要显示的颜色
 329          //  @return     void
 330          //  @since      v1.0
 331          //  Sample usage:               lcd_drawpoint(0,0,RED);  //坐标0,0画一个红色的点
 332          //--------------------------------------------------------------------------------------------------------
             ------------
 333          void lcd_drawpoint_simspi(uint16 x,uint16 y,uint16 color)
 334          {
 335   1          lcd_set_region_simspi(x,y,x,y);
 336   1          lcd_writeData_16bit_simspi(color);
 337   1      }
 338          
 339          
 340          
 341          //--------------------------------------------------------------------------------------------------------
             ------------
C51 COMPILER V9.57.0.0   SEEKFREE_18TFT                                                    04/28/2021 20:58:26 PAGE 7   

 342          //  @brief      液晶显示字符
 343          //  @param      x               坐标x方向的起点 参数范围 0 -（TFT_X_MAX-1）
 344          //  @param      y               坐标y方向的起点 参数范围 0 -（TFT_Y_MAX/16-1）
 345          //  @param      dat             需要显示的字符
 346          //  @return     void
 347          //  @since      v1.0
 348          //  Sample usage:               lcd_showchar(0,0,'x');//坐标0,0写一个字符x
 349          //--------------------------------------------------------------------------------------------------------
             ------------
 350          void lcd_showchar_simspi(uint16 x,uint16 y,const int8 dat)
 351          {
 352   1        uint8 i,j;
 353   1        uint8 temp;
 354   1          
 355   1        for(i=0; i<16; i++)
 356   1        {
 357   2          lcd_set_region_simspi(x,y+i,x+7,y+i);
 358   2          temp = tft_ascii[dat-32][i];//减32因为是取模是从空格开始取得 空格在ascii中序号是32
 359   2          for(j=0; j<8; j++)
 360   2          {
 361   3            if(temp&0x01) lcd_writeData_16bit_simspi(TFT_PENCOLOR);
 362   3            else      lcd_writeData_16bit_simspi(TFT_BGCOLOR);
 363   3            temp>>=1;
 364   3          }
 365   2        }
 366   1      }
 367          
 368          //--------------------------------------------------------------------------------------------------------
             ------------
 369          //  @brief      液晶显示字符串
 370          //  @param      x               坐标x方向的起点  参数范围 0 -（TFT_X_MAX-1）
 371          //  @param      y               坐标y方向的起点  参数范围 0 -（TFT_Y_MAX/16-1）
 372          //  @param      dat             需要显示的字符串
 373          //  @return     void
 374          //  @since      v1.0
 375          //  Sample usage:               lcd_showstr(0,0,"seekfree");
 376          //--------------------------------------------------------------------------------------------------------
             ------------
 377          void lcd_showstr_simspi(uint16 x,uint16 y,const int8 dat[])
 378          {
 379   1        uint16 j;
 380   1        
 381   1        j = 0;
 382   1        while(dat[j] != '\0')
 383   1        {
 384   2          lcd_showchar_simspi(x+8*j,y*16,dat[j]);
 385   2          j++;
 386   2        }
 387   1      }
 388          
 389          //--------------------------------------------------------------------------------------------------------
             ------------
 390          //  @brief      液晶显示8位有符号
 391          //  @param      x               坐标x方向的起点  参数范围 0 -（TFT_X_MAX-1）
 392          //  @param      y               坐标y方向的起点  参数范围 0 -（TFT_Y_MAX/16-1）
 393          //  @param      dat             需要显示的变量，数据类型int8
 394          //  @return     void
 395          //  @since      v1.0
 396          //  Sample usage:               lcd_showint8(0,0,x);//x为int8类型
 397          //--------------------------------------------------------------------------------------------------------
             ------------
 398          void lcd_showint8_simspi(uint16 x,uint16 y,int8 dat)
C51 COMPILER V9.57.0.0   SEEKFREE_18TFT                                                    04/28/2021 20:58:26 PAGE 8   

 399          {
 400   1        uint8 a[3];
 401   1        uint8 i;
 402   1        if(dat<0)
 403   1        {
 404   2          lcd_showchar_simspi(x,y*16,'-');
 405   2          dat = -dat;
 406   2        }
 407   1        else  lcd_showchar_simspi(x,y*16,' ');
 408   1        
 409   1        a[0] = dat/100;
 410   1        a[1] = dat/10%10;
 411   1        a[2] = dat%10;
 412   1        i = 0;
 413   1        while(i<3)
 414   1        {
 415   2          lcd_showchar_simspi(x+(8*(i+1)),y*16,'0' + a[i]);
 416   2          i++;
 417   2        }
 418   1      }
 419          
 420          //--------------------------------------------------------------------------------------------------------
             ------------
 421          //  @brief      液晶显示8位无符号
 422          //  @param      x               坐标x方向的起点 参数范围 0 -（TFT_X_MAX-1）
 423          //  @param      y               坐标y方向的起点 参数范围 0 -（TFT_Y_MAX/16-1）
 424          //  @param      dat             需要显示的变量，数据类型uint8
 425          //  @return     void
 426          //  @since      v1.0
 427          //  Sample usage:               lcd_showuint8(0,0,x);//x为uint8类型
 428          //--------------------------------------------------------------------------------------------------------
             ------------
 429          void lcd_showuint8_simspi(uint16 x,uint16 y,uint8 dat)
 430          {
 431   1        uint8 a[3];
 432   1        uint8 i;
 433   1        
 434   1        a[0] = dat/100;
 435   1        a[1] = dat/10%10;
 436   1        a[2] = dat%10;
 437   1        i = 0;
 438   1        while(i<3)
 439   1        {
 440   2          lcd_showchar_simspi(x+(8*i),y*16,'0' + a[i]);
 441   2          i++;
 442   2        }
 443   1        
 444   1      }
 445          
 446          //--------------------------------------------------------------------------------------------------------
             ------------
 447          //  @brief      液晶显示16位有符号
 448          //  @param      x               坐标x方向的起点 参数范围 0 -（TFT_X_MAX-1）
 449          //  @param      y               坐标y方向的起点 参数范围 0 -（TFT_Y_MAX/16-1）
 450          //  @param      dat             需要显示的变量，数据类型int16
 451          //  @return     void
 452          //  @since      v1.0
 453          //  Sample usage:               lcd_showint16(0,0,x);//x为int16类型
 454          //--------------------------------------------------------------------------------------------------------
             ------------
 455          void lcd_showint16_simspi(uint16 x,uint16 y,int16 dat)
 456          {
C51 COMPILER V9.57.0.0   SEEKFREE_18TFT                                                    04/28/2021 20:58:26 PAGE 9   

 457   1        uint8 a[5];
 458   1        uint8 i;
 459   1        if(dat<0)
 460   1        {
 461   2          lcd_showchar_simspi(x,y*16,'-');
 462   2          dat = -dat;
 463   2        }
 464   1        else  lcd_showchar_simspi(x,y*16,' ');
 465   1      
 466   1        a[0] = dat/10000;
 467   1        a[1] = dat/1000%10;
 468   1        a[2] = dat/100%10;
 469   1        a[3] = dat/10%10;
 470   1        a[4] = dat%10;
 471   1        
 472   1        i = 0;
 473   1        while(i<5)
 474   1        {
 475   2          lcd_showchar_simspi(x+(8*(i+1)),y*16,'0' + a[i]);
 476   2          i++;
 477   2        }
 478   1      }
 479          
 480          //--------------------------------------------------------------------------------------------------------
             ------------
 481          //  @brief      液晶显示16位无符号
 482          //  @param      x               坐标x方向的起点 参数范围 0 -（TFT_X_MAX-1）
 483          //  @param      y               坐标y方向的起点 参数范围 0 -（TFT_Y_MAX/16-1）
 484          //  @param      dat             需要显示的变量，数据类型uint16
 485          //  @return     void
 486          //  @since      v1.0
 487          //  Sample usage:               lcd_showuint16(0,0,x);//x为uint16类型
 488          //--------------------------------------------------------------------------------------------------------
             ------------
 489          void lcd_showuint16_simspi(uint16 x,uint16 y,uint16 dat)
 490          {
 491   1        uint8 a[5];
 492   1        uint8 i;
 493   1      
 494   1        a[0] = dat/10000;
 495   1        a[1] = dat/1000%10;
 496   1        a[2] = dat/100%10;
 497   1        a[3] = dat/10%10;
 498   1        a[4] = dat%10;
 499   1        
 500   1        i = 0;
 501   1        while(i<5)
 502   1        {
 503   2          lcd_showchar_simspi(x+(8*i),y*16,'0' + a[i]);
 504   2          i++;
 505   2        }
 506   1      }
 507          
 508          //--------------------------------------------------------------------------------------------------------
             ------------
 509          //  @brief      液晶显示32位有符号(去除整数部分无效的0)
 510          //  @param      x               坐标x方向的起点 参数范围 0 -（TFT_X_MAX-1）
 511          //  @param      y               坐标y方向的起点 参数范围 0 -（TFT_Y_MAX/16-1）
 512          //  @param      dat             需要显示的变量，数据类型uint32
 513          //  @param      num             需要显示的位数 最高10位  不包含正负号
 514          //  @return     void
 515          //  @since      v1.0
C51 COMPILER V9.57.0.0   SEEKFREE_18TFT                                                    04/28/2021 20:58:26 PAGE 10  

 516          //  Sample usage:               lcd_showuint32(0,0,x,3);//x可以为int32 uint16 int16 uint8 int8类型
 517          //  Sample usage:               负数会显示一个 ‘-’号   正数显示一个空格
 518          //--------------------------------------------------------------------------------------------------------
             ------------
 519          void lcd_showint32_simspi(uint16 x,uint16 y,int32 dat,uint8 num)
 520          {
 521   1          int8    buff[34];
 522   1          uint8   length;
 523   1          
 524   1          if(10<num)      num = 10;
 525   1          
 526   1          num++;
 527   1          if(0>dat)   length = zf_sprintf( &buff[0],"%d",dat);//负数
 528   1          else
 529   1          {
 530   2              buff[0] = ' ';
 531   2              length = zf_sprintf( &buff[1],"%d",dat);
 532   2              length++;
 533   2          }
 534   1          while(length < num)
 535   1          {
 536   2              buff[length] = ' ';
 537   2              length++;
 538   2          }
 539   1          buff[num] = '\0';
 540   1      
 541   1          lcd_showstr_simspi(x, y, buff); //显示数字
 542   1      }
 543          
 544          
 545          //--------------------------------------------------------------------------------------------------------
             ------------
 546          //  @brief      液晶显示浮点数(去除整数部分无效的0)
 547          //  @param      x               坐标x方向的起点 参数范围 0 -（TFT_X_MAX-1）
 548          //  @param      y               坐标y方向的起点 参数范围 0 -（TFT_Y_MAX/16-1）
 549          //  @param      dat             需要显示的变量，数据类型float或double
 550          //  @param      num             整数位显示长度   最高10位  
 551          //  @param      pointnum        小数位显示长度   最高6位
 552          //  @return     void
 553          //  @since      v1.0
 554          //  Sample usage:               lcd_showfloat(0,0,x,2,3);//显示浮点数   整数显示2位   小数显示三位
 555          //  @note                       特别注意当发现小数部分显示的值与你写入的值不一样的时候，
 556          //                              可能是由于浮点数精度丢失问题导致的，这并不是显示函数的问题，
 557          //                              有关问题的详情，请自行百度学习   浮点数精度丢失问题。
 558          //                              负数会显示一个 ‘-’号   正数显示一个空格
 559          //--------------------------------------------------------------------------------------------------------
             ------------
 560          void lcd_showfloat_simspi(uint16 x,uint16 y,double dat,uint8 num,uint8 pointnum)
 561          {
 562   1          uint8   length;
 563   1        int8    buff[34];
 564   1        int8    start,end,point;
 565   1      
 566   1        if(6<pointnum)  pointnum = 6;
 567   1          if(10<num)      num = 10;
 568   1              
 569   1          if(0>dat)   length = zf_sprintf( &buff[0],"%f",dat);//负数
 570   1          else
 571   1          {
 572   2              length = zf_sprintf( &buff[1],"%f",dat);
 573   2              length++;
 574   2          }
C51 COMPILER V9.57.0.0   SEEKFREE_18TFT                                                    04/28/2021 20:58:26 PAGE 11  

 575   1          point = length - 7;         //计算小数点位置
 576   1          start = point - num - 1;    //计算起始位
 577   1          end = point + pointnum + 1; //计算结束位
 578   1          while(0>start)//整数位不够  末尾应该填充空格
 579   1          {
 580   2              buff[end] = ' ';
 581   2              end++;
 582   2              start++;
 583   2          }
 584   1          
 585   1          if(0>dat)   buff[start] = '-';
 586   1          else        buff[start] = ' ';
 587   1          
 588   1          buff[end] = '\0';
 589   1      
 590   1          lcd_showstr_simspi(x, y, buff); //显示数字
 591   1      }
 592          
 593          
 594          //--------------------------------------------------------------------------------------------------------
             ------------
 595          //  以下函数是使用硬件SPI通信，相比较软件IIC，速度比软件IIC快。
 596          //--------------------------------------------------------------------------------------------------------
             ------------
 597          
 598          
 599          //--------------------------------------------------------------------------------------------------------
             ------------
 600          //  @brief      内部调用，用户无需关心
 601          //  @param      void        
 602          //  @return             
 603          //  @since      v1.0
 604          //  Sample usage:               
 605          //--------------------------------------------------------------------------------------------------------
             ------------
 606          void lcd_writeIndex(uint8 dat)      //写命令
 607          { 
 608   1        
 609   1          TFT_CS(0);
 610   1        TFT_DC(0);
 611   1        spi_mosi(dat);
 612   1          TFT_CS(1);
 613   1      }
 614          
 615          //--------------------------------------------------------------------------------------------------------
             ------------
 616          //  @brief      内部调用，用户无需关心
 617          //  @param      void        
 618          //  @return             
 619          //  @since      v1.0
 620          //  Sample usage:               
 621          //--------------------------------------------------------------------------------------------------------
             ------------
 622          void lcd_writeData(uint8 dat)     //写数据
 623          {
 624   1      
 625   1        
 626   1          TFT_CS(0);
 627   1        TFT_DC(1);
 628   1        spi_mosi(dat);
 629   1          TFT_CS(1);
 630   1      }
C51 COMPILER V9.57.0.0   SEEKFREE_18TFT                                                    04/28/2021 20:58:26 PAGE 12  

 631          
 632          //--------------------------------------------------------------------------------------------------------
             ------------
 633          //  @brief      内部调用，用户无需关心
 634          //  @param      void        
 635          //  @return             
 636          //  @since      v1.0
 637          //  Sample usage:               
 638          //--------------------------------------------------------------------------------------------------------
             ------------
 639          void lcd_writedata_16bit(uint16 dat)  //向液晶屏写一个16位数据
 640          {
 641   1      
 642   1          uint8 dat1[2];
 643   1          dat1[0] = dat >> 8;
 644   1          dat1[1] = (uint8)dat;
 645   1        
 646   1          TFT_CS(0);
 647   1          TFT_DC(1);
 648   1        spi_mosi(dat1[0]);
 649   1        spi_mosi(dat1[1]);
 650   1          TFT_CS(1);
 651   1      
 652   1      }
 653          
 654          //--------------------------------------------------------------------------------------------------------
             ------------
 655          //  @brief      液晶坐标设置
 656          //  @param      x_start       坐标x方向的起点
 657          //  @param      y_start       坐标y方向的起点
 658          //  @param      x_end         坐标x方向的终点
 659          //  @param      y_end         坐标y方向的终点
 660          //  @return     void
 661          //  @since      v1.0
 662          //  Sample usage:               lcd_set_region(0,0,10,10);// x、y的起点都是0，终点都是10
 663          //--------------------------------------------------------------------------------------------------------
             ------------
 664          void lcd_set_region(unsigned int x_start,unsigned int y_start,unsigned int x_end,unsigned int y_end)
 665          { 
 666   1      
 667   1          
 668   1      #if (0 == TFT_DISPLAY_DIR || 1 == TFT_DISPLAY_DIR)
 669   1          lcd_writeIndex(0x2a);
 670   1        lcd_writeData(0x00);
 671   1        lcd_writeData(x_start+2);
 672   1        lcd_writeData(0x00);
 673   1        lcd_writeData(x_end+2);
 674   1      
 675   1        lcd_writeIndex(0x2b);
 676   1        lcd_writeData(0x00);
 677   1        lcd_writeData(y_start+1);
 678   1        lcd_writeData(0x00);
 679   1        lcd_writeData(y_end+1); 
 680   1      
 681   1      #elif(2 == TFT_DISPLAY_DIR || 3 == TFT_DISPLAY_DIR)
                  lcd_writeIndex(0x2a);
                lcd_writeData(0x00);
                lcd_writeData(x_start+1);
                lcd_writeData(0x0);
                lcd_writeData(x_end+1);
              
                lcd_writeIndex(0x2b);
C51 COMPILER V9.57.0.0   SEEKFREE_18TFT                                                    04/28/2021 20:58:26 PAGE 13  

                lcd_writeData(0x00);
                lcd_writeData(y_start+2);
                lcd_writeData(0x00);
                lcd_writeData(y_end+2); 
              
              #endif
 695   1          
 696   1          lcd_writeIndex(0x2c);
 697   1      }
 698          
 699          //--------------------------------------------------------------------------------------------------------
             ------------
 700          //  @brief      液晶清屏函数
 701          //  @param      color         颜色设置
 702          //  @return     void
 703          //  @since      v1.0
 704          //  Sample usage:               lcd_clear(YELLOW);// 全屏设置为黄色
 705          //--------------------------------------------------------------------------------------------------------
             ------------
 706          void lcd_clear(int color)
 707          {
 708   1        uint8 i,j;
 709   1        lcd_set_region(0,0,TFT_X_MAX-1,TFT_Y_MAX-1);
 710   1        for (i=0;i<TFT_Y_MAX;i++)
 711   1            for (j=0;j<TFT_X_MAX;j++)
 712   1                lcd_writedata_16bit(color);
 713   1      }
 714          
 715          
 716          //--------------------------------------------------------------------------------------------------------
             ------------
 717          //  @brief      液晶初始化
 718          //  @return     void
 719          //  @since      v1.0
 720          //  Sample usage:               
 721          //--------------------------------------------------------------------------------------------------------
             ------------
 722          void lcd_init(void)
 723          { 
 724   1        spi_init(TFT_SPIN, TFT_SCL_PIN, TFT_SDA_PIN, TFT_SDA_IN_PIN, 0, MASTER, SPI_SYSclk_DIV_4);
 725   1      
 726   1          TFT_REST(0);
 727   1          delay_ms(10);
 728   1          TFT_REST(1);
 729   1          delay_ms(120);
 730   1          lcd_writeIndex(0x11);
 731   1          delay_ms(120);
 732   1      
 733   1          lcd_writeIndex(0xB1); 
 734   1          lcd_writeData(0x01); 
 735   1          lcd_writeData(0x2C); 
 736   1          lcd_writeData(0x2D); 
 737   1          
 738   1          lcd_writeIndex(0xB2); 
 739   1          lcd_writeData(0x01); 
 740   1          lcd_writeData(0x2C); 
 741   1          lcd_writeData(0x2D); 
 742   1          
 743   1          lcd_writeIndex(0xB3); 
 744   1          lcd_writeData(0x01); 
 745   1          lcd_writeData(0x2C); 
 746   1          lcd_writeData(0x2D); 
C51 COMPILER V9.57.0.0   SEEKFREE_18TFT                                                    04/28/2021 20:58:26 PAGE 14  

 747   1          lcd_writeData(0x01); 
 748   1          lcd_writeData(0x2C); 
 749   1          lcd_writeData(0x2D); 
 750   1          
 751   1          lcd_writeIndex(0xB4);
 752   1          lcd_writeData(0x07); 
 753   1      
 754   1          lcd_writeIndex(0xC0); 
 755   1          lcd_writeData(0xA2); 
 756   1          lcd_writeData(0x02); 
 757   1          lcd_writeData(0x84); 
 758   1          lcd_writeIndex(0xC1); 
 759   1          lcd_writeData(0xC5); 
 760   1          
 761   1          lcd_writeIndex(0xC2); 
 762   1          lcd_writeData(0x0A); 
 763   1          lcd_writeData(0x00); 
 764   1          
 765   1          lcd_writeIndex(0xC3); 
 766   1          lcd_writeData(0x8A); 
 767   1          lcd_writeData(0x2A); 
 768   1          lcd_writeIndex(0xC4); 
 769   1          lcd_writeData(0x8A); 
 770   1          lcd_writeData(0xEE); 
 771   1          
 772   1          lcd_writeIndex(0xC5);
 773   1          lcd_writeData(0x0E); 
 774   1          
 775   1          lcd_writeIndex(0x36);
 776   1          switch(TFT_DISPLAY_DIR)//y x v
 777   1          {
 778   2              case 0: lcd_writeData(1<<7 | 1<<6 | 0<<5);  break;  //竖屏模式
 779   2              case 1: lcd_writeData(0<<7 | 0<<6 | 0<<5);  break;  //竖屏模式  旋转180
 780   2              case 2: lcd_writeData(1<<7 | 0<<6 | 1<<5);  break;  //横屏模式
 781   2              case 3: lcd_writeData(0<<7 | 1<<6 | 1<<5);  break;  //横屏模式  旋转180
 782   2          }
 783   1      
 784   1          lcd_writeIndex(0xe0); 
 785   1          lcd_writeData(0x0f); 
 786   1          lcd_writeData(0x1a); 
 787   1          lcd_writeData(0x0f); 
 788   1          lcd_writeData(0x18); 
 789   1          lcd_writeData(0x2f); 
 790   1          lcd_writeData(0x28); 
 791   1          lcd_writeData(0x20); 
 792   1          lcd_writeData(0x22); 
 793   1          lcd_writeData(0x1f); 
 794   1          lcd_writeData(0x1b); 
 795   1          lcd_writeData(0x23); 
 796   1          lcd_writeData(0x37); 
 797   1          lcd_writeData(0x00);  
 798   1          lcd_writeData(0x07); 
 799   1          lcd_writeData(0x02); 
 800   1          lcd_writeData(0x10); 
 801   1          
 802   1          lcd_writeIndex(0xe1); 
 803   1          lcd_writeData(0x0f); 
 804   1          lcd_writeData(0x1b); 
 805   1          lcd_writeData(0x0f); 
 806   1          lcd_writeData(0x17); 
 807   1          lcd_writeData(0x33); 
 808   1          lcd_writeData(0x2c); 
C51 COMPILER V9.57.0.0   SEEKFREE_18TFT                                                    04/28/2021 20:58:26 PAGE 15  

 809   1          lcd_writeData(0x29); 
 810   1          lcd_writeData(0x2e); 
 811   1          lcd_writeData(0x30); 
 812   1          lcd_writeData(0x30); 
 813   1          lcd_writeData(0x39); 
 814   1          lcd_writeData(0x3f); 
 815   1          lcd_writeData(0x00); 
 816   1          lcd_writeData(0x07); 
 817   1          lcd_writeData(0x03); 
 818   1          lcd_writeData(0x10);  
 819   1          
 820   1          lcd_writeIndex(0x2a);
 821   1          lcd_writeData(0x00);
 822   1          lcd_writeData(0x00+2);
 823   1          lcd_writeData(0x00);
 824   1          lcd_writeData(0x80+2);
 825   1          
 826   1          lcd_writeIndex(0x2b);
 827   1          lcd_writeData(0x00);
 828   1          lcd_writeData(0x00+3);
 829   1          lcd_writeData(0x00);
 830   1          lcd_writeData(0x80+3);
 831   1          
 832   1          lcd_writeIndex(0xF0); 
 833   1          lcd_writeData(0x01); 
 834   1          lcd_writeIndex(0xF6);
 835   1          lcd_writeData(0x00); 
 836   1          
 837   1          lcd_writeIndex(0x3A);
 838   1          lcd_writeData(0x05); 
 839   1          lcd_writeIndex(0x29);
 840   1      
 841   1          lcd_clear(WHITE);//全白
 842   1      }
 843          
 844          //--------------------------------------------------------------------------------------------------------
             ------------
 845          //  @brief      液晶画点
 846          //  @param      x               坐标x方向的起点
 847          //  @param      y               坐标y方向的起点
 848          //  @param      dat             需要显示的颜色
 849          //  @return     void
 850          //  @since      v1.0
 851          //  Sample usage:               lcd_drawpoint(0,0,RED);  //坐标0,0画一个红色的点
 852          //--------------------------------------------------------------------------------------------------------
             ------------
 853          void lcd_drawpoint(uint16 x,uint16 y,uint16 color)
 854          {
 855   1          lcd_set_region(x,y,x,y);
 856   1          lcd_writedata_16bit(color);
 857   1      }
 858          
 859          
 860          
 861          //--------------------------------------------------------------------------------------------------------
             ------------
 862          //  @brief      液晶显示字符
 863          //  @param      x               坐标x方向的起点 参数范围 0 -（TFT_X_MAX-1）
 864          //  @param      y               坐标y方向的起点 参数范围 0 -（TFT_Y_MAX/16-1）
 865          //  @param      dat             需要显示的字符
 866          //  @return     void
 867          //  @since      v1.0
C51 COMPILER V9.57.0.0   SEEKFREE_18TFT                                                    04/28/2021 20:58:26 PAGE 16  

 868          //  Sample usage:               lcd_showchar(0,0,'x');//坐标0,0写一个字符x
 869          //--------------------------------------------------------------------------------------------------------
             ------------
 870          void lcd_showchar(uint16 x,uint16 y,const int8 dat)
 871          {
 872   1        uint8 i,j;
 873   1        uint8 temp;
 874   1          
 875   1        for(i=0; i<16; i++)
 876   1        {
 877   2          lcd_set_region(x,y+i,x+7,y+i);
 878   2          temp = tft_ascii[dat-32][i];//减32因为是取模是从空格开始取得 空格在ascii中序号是32
 879   2          for(j=0; j<8; j++)
 880   2          {
 881   3            if(temp&0x01) lcd_writedata_16bit(TFT_PENCOLOR);
 882   3            else      lcd_writedata_16bit(TFT_BGCOLOR);
 883   3            temp>>=1;
 884   3          }
 885   2        }
 886   1      }
 887          
 888          //--------------------------------------------------------------------------------------------------------
             ------------
 889          //  @brief      液晶显示字符串
 890          //  @param      x               坐标x方向的起点  参数范围 0 -（TFT_X_MAX-1）
 891          //  @param      y               坐标y方向的起点  参数范围 0 -（TFT_Y_MAX/16-1）
 892          //  @param      dat             需要显示的字符串
 893          //  @return     void
 894          //  @since      v1.0
 895          //  Sample usage:               lcd_showstr(0,0,"seekfree");
 896          //--------------------------------------------------------------------------------------------------------
             ------------
 897          void lcd_showstr(uint16 x,uint16 y,const int8 dat[])
 898          {
 899   1        uint16 j;
 900   1        
 901   1        j = 0;
 902   1        while(dat[j] != '\0')
 903   1        {
 904   2          lcd_showchar(x+8*j,y*16,dat[j]);
 905   2          j++;
 906   2        }
 907   1      }
 908          
 909          //--------------------------------------------------------------------------------------------------------
             ------------
 910          //  @brief      液晶显示8位有符号
 911          //  @param      x               坐标x方向的起点  参数范围 0 -（TFT_X_MAX-1）
 912          //  @param      y               坐标y方向的起点  参数范围 0 -（TFT_Y_MAX/16-1）
 913          //  @param      dat             需要显示的变量，数据类型int8
 914          //  @return     void
 915          //  @since      v1.0
 916          //  Sample usage:               lcd_showint8(0,0,x);//x为int8类型
 917          //--------------------------------------------------------------------------------------------------------
             ------------
 918          void lcd_showint8(uint16 x,uint16 y,int8 dat)
 919          {
 920   1        uint8 a[3];
 921   1        uint8 i;
 922   1        if(dat<0)
 923   1        {
 924   2          lcd_showchar(x,y*16,'-');
C51 COMPILER V9.57.0.0   SEEKFREE_18TFT                                                    04/28/2021 20:58:26 PAGE 17  

 925   2          dat = -dat;
 926   2        }
 927   1        else  lcd_showchar(x,y*16,' ');
 928   1        
 929   1        a[0] = dat/100;
 930   1        a[1] = dat/10%10;
 931   1        a[2] = dat%10;
 932   1        i = 0;
 933   1        while(i<3)
 934   1        {
 935   2          lcd_showchar(x+(8*(i+1)),y*16,'0' + a[i]);
 936   2          i++;
 937   2        }
 938   1      }
 939          
 940          //--------------------------------------------------------------------------------------------------------
             ------------
 941          //  @brief      液晶显示8位无符号
 942          //  @param      x               坐标x方向的起点 参数范围 0 -（TFT_X_MAX-1）
 943          //  @param      y               坐标y方向的起点 参数范围 0 -（TFT_Y_MAX/16-1）
 944          //  @param      dat             需要显示的变量，数据类型uint8
 945          //  @return     void
 946          //  @since      v1.0
 947          //  Sample usage:               lcd_showuint8(0,0,x);//x为uint8类型
 948          //--------------------------------------------------------------------------------------------------------
             ------------
 949          void lcd_showuint8(uint16 x,uint16 y,uint8 dat)
 950          {
 951   1        uint8 a[3];
 952   1        uint8 i;
 953   1        
 954   1        a[0] = dat/100;
 955   1        a[1] = dat/10%10;
 956   1        a[2] = dat%10;
 957   1        i = 0;
 958   1        while(i<3)
 959   1        {
 960   2          lcd_showchar(x+(8*i),y*16,'0' + a[i]);
 961   2          i++;
 962   2        }
 963   1        
 964   1      }
 965          
 966          //--------------------------------------------------------------------------------------------------------
             ------------
 967          //  @brief      液晶显示16位有符号
 968          //  @param      x               坐标x方向的起点 参数范围 0 -（TFT_X_MAX-1）
 969          //  @param      y               坐标y方向的起点 参数范围 0 -（TFT_Y_MAX/16-1）
 970          //  @param      dat             需要显示的变量，数据类型int16
 971          //  @return     void
 972          //  @since      v1.0
 973          //  Sample usage:               lcd_showint16(0,0,x);//x为int16类型
 974          //--------------------------------------------------------------------------------------------------------
             ------------
 975          void lcd_showint16(uint16 x,uint16 y,int16 dat)
 976          {
 977   1        uint8 a[5];
 978   1        uint8 i;
 979   1        if(dat<0)
 980   1        {
 981   2          lcd_showchar(x,y*16,'-');
 982   2          dat = -dat;
C51 COMPILER V9.57.0.0   SEEKFREE_18TFT                                                    04/28/2021 20:58:26 PAGE 18  

 983   2        }
 984   1        else  lcd_showchar(x,y*16,' ');
 985   1      
 986   1        a[0] = dat/10000;
 987   1        a[1] = dat/1000%10;
 988   1        a[2] = dat/100%10;
 989   1        a[3] = dat/10%10;
 990   1        a[4] = dat%10;
 991   1        
 992   1        i = 0;
 993   1        while(i<5)
 994   1        {
 995   2          lcd_showchar(x+(8*(i+1)),y*16,'0' + a[i]);
 996   2          i++;
 997   2        }
 998   1      }
 999          
1000          //--------------------------------------------------------------------------------------------------------
             ------------
1001          //  @brief      液晶显示16位无符号
1002          //  @param      x               坐标x方向的起点 参数范围 0 -（TFT_X_MAX-1）
1003          //  @param      y               坐标y方向的起点 参数范围 0 -（TFT_Y_MAX/16-1）
1004          //  @param      dat             需要显示的变量，数据类型uint16
1005          //  @return     void
1006          //  @since      v1.0
1007          //  Sample usage:               lcd_showuint16(0,0,x);//x为uint16类型
1008          //--------------------------------------------------------------------------------------------------------
             ------------
1009          void lcd_showuint16(uint16 x,uint16 y,uint16 dat)
1010          {
1011   1        uint8 a[5];
1012   1        uint8 i;
1013   1      
1014   1        a[0] = dat/10000;
1015   1        a[1] = dat/1000%10;
1016   1        a[2] = dat/100%10;
1017   1        a[3] = dat/10%10;
1018   1        a[4] = dat%10;
1019   1        
1020   1        i = 0;
1021   1        while(i<5)
1022   1        {
1023   2          lcd_showchar(x+(8*i),y*16,'0' + a[i]);
1024   2          i++;
1025   2        }
1026   1      }
1027          
1028          //--------------------------------------------------------------------------------------------------------
             ------------
1029          //  @brief      液晶显示32位有符号(去除整数部分无效的0)
1030          //  @param      x               坐标x方向的起点 参数范围 0 -（TFT_X_MAX-1）
1031          //  @param      y               坐标y方向的起点 参数范围 0 -（TFT_Y_MAX/16-1）
1032          //  @param      dat             需要显示的变量，数据类型uint32
1033          //  @param      num             需要显示的位数 最高10位  不包含正负号
1034          //  @return     void
1035          //  @since      v1.0
1036          //  Sample usage:               lcd_showuint32(0,0,x,3);//x可以为int32 uint16 int16 uint8 int8类型
1037          //  Sample usage:               负数会显示一个 ‘-’号   正数显示一个空格
1038          //--------------------------------------------------------------------------------------------------------
             ------------
1039          void lcd_showint32(uint16 x,uint16 y,int32 dat,uint8 num)
1040          {
C51 COMPILER V9.57.0.0   SEEKFREE_18TFT                                                    04/28/2021 20:58:26 PAGE 19  

1041   1          int8    buff[34];
1042   1          uint8   length;
1043   1          
1044   1          if(10<num)      num = 10;
1045   1          
1046   1          num++;
1047   1          if(0>dat)   length = zf_sprintf( &buff[0],"%d",dat);//负数
1048   1          else
1049   1          {
1050   2              buff[0] = ' ';
1051   2              length = zf_sprintf( &buff[1],"%d",dat);
1052   2              length++;
1053   2          }
1054   1          while(length < num)
1055   1          {
1056   2              buff[length] = ' ';
1057   2              length++;
1058   2          }
1059   1          buff[num] = '\0';
1060   1      
1061   1          lcd_showstr(x, y, buff);  //显示数字
1062   1      }
1063          
1064          
1065          //--------------------------------------------------------------------------------------------------------
             ------------
1066          //  @brief      液晶显示浮点数(去除整数部分无效的0)
1067          //  @param      x               坐标x方向的起点 参数范围 0 -（TFT_X_MAX-1）
1068          //  @param      y               坐标y方向的起点 参数范围 0 -（TFT_Y_MAX/16-1）
1069          //  @param      dat             需要显示的变量，数据类型float或double
1070          //  @param      num             整数位显示长度   最高10位  
1071          //  @param      pointnum        小数位显示长度   最高6位
1072          //  @return     void
1073          //  @since      v1.0
1074          //  Sample usage:               lcd_showfloat(0,0,x,2,3);//显示浮点数   整数显示2位   小数显示三位
1075          //  @note                       特别注意当发现小数部分显示的值与你写入的值不一样的时候，
1076          //                              可能是由于浮点数精度丢失问题导致的，这并不是显示函数的问题，
1077          //                              有关问题的详情，请自行百度学习   浮点数精度丢失问题。
1078          //                              负数会显示一个 ‘-’号   正数显示一个空格
1079          //--------------------------------------------------------------------------------------------------------
             ------------
1080          void lcd_showfloat(uint16 x,uint16 y,double dat,uint8 num,uint8 pointnum)
1081          {
1082   1          uint8   length;
1083   1        int8    buff[34];
1084   1        int8    start,end,point;
1085   1      
1086   1        if(6<pointnum)  pointnum = 6;
1087   1          if(10<num)      num = 10;
1088   1              
1089   1          if(0>dat)   length = zf_sprintf( &buff[0],"%f",dat);//负数
1090   1          else
1091   1          {
1092   2              length = zf_sprintf( &buff[1],"%f",dat);
1093   2              length++;
1094   2          }
1095   1          point = length - 7;         //计算小数点位置
1096   1          start = point - num - 1;    //计算起始位
1097   1          end = point + pointnum + 1; //计算结束位
1098   1          while(0>start)//整数位不够  末尾应该填充空格
1099   1          {
1100   2              buff[end] = ' ';
C51 COMPILER V9.57.0.0   SEEKFREE_18TFT                                                    04/28/2021 20:58:26 PAGE 20  

1101   2              end++;
1102   2              start++;
1103   2          }
1104   1          
1105   1          if(0>dat)   buff[start] = '-';
1106   1          else        buff[start] = ' ';
1107   1          
1108   1          buff[end] = '\0';
1109   1      
1110   1          lcd_showstr(x, y, buff);  //显示数字
1111   1      }
1112          
1113          
1114          
1115          //--------------------------------------------------------------------------------------------------------
             ------------
1116          //  @brief      显示40*40 QQ图片
1117          //  @param      *p          图像数组地址
1118          //  @return     void
1119          //  @since      v1.0
1120          //  Sample usage:          
1121          //--------------------------------------------------------------------------------------------------------
             ------------
1122          void showimage(const unsigned char *p) 
1123          {
1124   1          int i,j,k; 
1125   1        unsigned char picH,picL;
1126   1        lcd_clear(WHITE); //清屏  
1127   1        
1128   1        for(k=0;k<4;k++)
1129   1        {
1130   2            for(j=0;j<3;j++)
1131   2          { 
1132   3            lcd_set_region(40*j,40*k,40*j+39,40*k+39);    //坐标设置
1133   3              for(i=0;i<40*40;i++)
1134   3             {  
1135   4              picL=*(p+i*2);  //数据低位在前
1136   4              picH=*(p+i*2+1);        
1137   4              lcd_writedata_16bit(picH<<8|picL);              
1138   4             }  
1139   3           }
1140   2        }   
1141   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5335    ----
   CONSTANT SIZE    =      6    ----
   XDATA SIZE       =   ----     339
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

C51 COMPILER V9.57.0.0   ZF_SPI                                                            04/28/2021 20:58:25 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE ZF_SPI
OBJECT MODULE PLACED IN .\Out_File\zf_spi.obj
COMPILER INVOKED BY: E:\keil5\anzhuang\C51\BIN\C51.EXE ..\..\Libraries\seekfree_libraries\zf_spi.c LARGE OMF2 OPTIMIZE(8
                    -,SPEED) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;.
                    -.\USER\inc;..\USER\src;..\CODE;.\HARDWORE\Data;.\HARDWORE\DianGan;.\HARDWORE\FusionAngle;.\HARDWORE\BianMaQi;.\HARDWORE\
                    -ShangWeiJi;.\HARDWORE;.\HARDWORE\Balance;.\KaErMan) DEBUG PRINT(.\Out_File\zf_spi.lst) TABS(2) OBJECT(.\Out_File\zf_spi.
                    -obj)

line level    source

   1          /*********************************************************************************************************
             -************
   2           * COPYRIGHT NOTICE
   3           * Copyright (c) 2020,逐飞科技
   4           * All rights reserved.
   5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
   6           *
   7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
   8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
   9           *
  10           * @file          spi
  11           * @company       成都逐飞科技有限公司
  12           * @author        逐飞科技(QQ790875685)
  13           * @version       查看doc内version文件 版本说明
  14           * @Software    MDK FOR C51 V9.60
  15           * @Target core   STC8H8K64S4
  16           * @Taobao      https://seekfree.taobao.com/
  17           * @date          2020-4-14
  18           *********************************************************************************************************
             -***********/
  19          
  20          
  21          #include "zf_gpio.h"
  22          #include "zf_spi.h"
  23          
  24          
  25          
  26          //--------------------------------------------------------------------------------------------------------
             ------------
  27          //  @brief      spi初始化函数(ss引脚由软件控制)
  28          //  @param      spi_n     选择SPI模块(SPI_1-SPI_4)
  29          //  @param      sck_pin     选择SCK引脚
  30          //  @param      mosi_pin    选择MOSI引脚
  31          //  @param      miso_pin    选择MISO引脚
  32          //  @param      mstr      主从选择
  33          //  @param      mode            SPI模式 0：CPOL=0 CPHA=0    1：CPOL=0 CPHA=1   2：CPOL=1 CPHA=0   3：CPOL=
             -1 CPHA=1 //具体细节可自行百度
  34          //  @param      baud      速率选择
  35          //  @since      v1.0
  36          //  Sample usage:       spi_init(SPI_1, SPI1_SCLK_P15, SPI1_MOSI_P13, SPI1_MISO_P14, 0, MASTER, SYSclk_DIV_4)
             -;  
  37          //                //初始化SPI1,主机模式,速率为系统频率/4，SCLK引脚P1.5 MOSI引脚P1.3 MISO引脚P1.4,SPI模式0
  38          //--------------------------------------------------------------------------------------------------------
             ------------
  39          void spi_init(SPIN_enum spi_n,
  40                  SPI_PIN_enum sck_pin, 
  41                  SPI_PIN_enum mosi_pin, 
  42                  SPI_PIN_enum miso_pin, 
  43                  uint8 mode,
  44                  SPI_MSTR_enum mstr,
  45                  SPI_BAUD_enum baud)
C51 COMPILER V9.57.0.0   ZF_SPI                                                            04/28/2021 20:58:25 PAGE 2   

  46          {
  47   1      
  48   1        sck_pin = sck_pin;
  49   1        mosi_pin = mosi_pin;
  50   1        miso_pin = miso_pin;
  51   1        
  52   1        switch(spi_n)
  53   1          {
  54   2        //IO口需要配置为：准双向口（传统8051端口模式，弱上拉）
  55   2          case SPI_1:
  56   2          gpio_mode(P1_3,GPIO);
  57   2          gpio_mode(P1_4,GPIO);
  58   2          gpio_mode(P1_5,GPIO);
  59   2              break;
  60   2          case SPI_2:
  61   2          gpio_mode(P2_3,GPIO);
  62   2          gpio_mode(P2_4,GPIO);
  63   2          gpio_mode(P2_5,GPIO);
  64   2              break;
  65   2          case SPI_3:
  66   2          gpio_mode(P4_0,GPIO);
  67   2          gpio_mode(P4_1,GPIO);
  68   2          gpio_mode(P4_3,GPIO);
  69   2              break;
  70   2          case SPI_4:
  71   2          gpio_mode(P3_4,GPIO);
  72   2          gpio_mode(P3_3,GPIO);
  73   2          gpio_mode(P3_2,GPIO);
  74   2              break;
  75   2          }
  76   1        
  77   1        P_SW1 &= ~(0x03<<2);  //清除SPI功能脚选择位
  78   1          switch(spi_n)
  79   1          {
  80   2          case SPI_1:
  81   2              P_SW1 |= (0x00<<2);
  82   2              break;
  83   2          case SPI_2:
  84   2              P_SW1 |= (0x01<<2);
  85   2              break;
  86   2          case SPI_3:
  87   2              P_SW1 |= (0x02<<2);
  88   2              break;
  89   2          case SPI_4:
  90   2              P_SW1 |= (0x03<<2);
  91   2              break;
  92   2          }
  93   1        
  94   1        SPCTL &= 0xF3;    //清除SPI极性和相位
  95   1        switch(mode)
  96   1        {
  97   2        case 0:
  98   2          
  99   2          break;
 100   2        case 1:
 101   2          SPCTL |= 0x01<<2;
 102   2          break;
 103   2        case 2:
 104   2          SPCTL |= 0x02<<2;
 105   2          break;
 106   2        case 3:
 107   2          SPCTL |= 0x03<<2;
C51 COMPILER V9.57.0.0   ZF_SPI                                                            04/28/2021 20:58:25 PAGE 3   

 108   2          break;
 109   2        }
 110   1          
 111   1        
 112   1        SPCTL |= baud;    //速率设定
 113   1      
 114   1          if(mstr == MASTER)
 115   1          {
 116   2              SPCTL |= 1<<7;  //忽略SS引脚功能，使用MSTR确定器件是主机还是从机
 117   2              SPCTL |= 1<<4;  //主机模式
 118   2          }
 119   1          else
 120   1          {
 121   2              //不做操作
 122   2          }
 123   1          SPCTL |= 1<<6;    //使能SPI功能
 124   1      }
 125          
 126          
 127          
 128          //--------------------------------------------------------------------------------------------------------
             ------------
 129          //  @brief      SPI发送接收函数
 130          //  @param      dat           发送的数据
 131          //  @since      v1.0
 132          //  Sample usage:       buf_1 = spi_mosi(buf);    //发送buf的内容，并接收到buf_1里，长度为1字节
 133          //--------------------------------------------------------------------------------------------------------
             ------------
 134          uint8 spi_mosi(uint8 dat)
 135          {
 136   1          SPDAT = dat;          //DATA寄存器赋值
 137   1          while (!(SPSTAT & 0x80));     //查询完成标志
 138   1          SPSTAT = 0xc0;                  //清中断标志
 139   1        return SPDAT;
 140   1      }
 141          
 142          
 143          //--------------------------------------------------------------------------------------------------------
             ------------
 144          //  @brief      spi引脚切换函数(ss引脚由软件控制)
 145          //  @param      spi_n     选择SPI模块(SPI_1-SPI_4)
 146          //  @param      sck_pin     选择SCK引脚
 147          //  @param      mosi_pin    选择MOSI引脚
 148          //  @param      miso_pin    选择MISO引脚
 149          //  Sample usage:       spi_change_pin(SPI_1,SPI1_SCLK_P15, SPI1_MOSI_P13,SPI1_MISO_P14); 
 150          //                //切换SPI引脚
 151          //--------------------------------------------------------------------------------------------------------
             ------------
 152          void spi_change_pin(SPIN_enum spi_n, SPI_PIN_enum sck_pin, SPI_PIN_enum mosi_pin, SPI_PIN_enum miso_pin)
 153          {
 154   1        sck_pin = sck_pin;
 155   1        mosi_pin = mosi_pin;
 156   1        miso_pin = miso_pin;
 157   1        
 158   1          P_SW1 &= ~(0x03<<2);  //清除SPI功能脚选择位
 159   1        switch(spi_n)
 160   1          {
 161   2        //IO口需要配置为：准双向口（传统8051端口模式，弱上拉）
 162   2          case SPI_1:
 163   2          gpio_mode(P1_3,GPO_PP);
 164   2          gpio_mode(P1_4,GPIO);
 165   2          gpio_mode(P1_5,GPO_PP);
C51 COMPILER V9.57.0.0   ZF_SPI                                                            04/28/2021 20:58:25 PAGE 4   

 166   2              break;
 167   2          case SPI_2:
 168   2          gpio_mode(P2_3,GPO_PP);
 169   2          gpio_mode(P2_4,GPIO);
 170   2          gpio_mode(P2_5,GPO_PP);
 171   2              break;
 172   2          case SPI_3:
 173   2          gpio_mode(P4_0,GPO_PP);
 174   2          gpio_mode(P4_1,GPIO);
 175   2          gpio_mode(P4_3,GPO_PP);
 176   2              break;
 177   2          case SPI_4:
 178   2          gpio_mode(P3_4,GPO_PP);
 179   2          gpio_mode(P3_3,GPIO);
 180   2          gpio_mode(P3_2,GPO_PP);
 181   2              break;
 182   2          }
 183   1        
 184   1      
 185   1          switch(spi_n)
 186   1          {
 187   2          case SPI_1:
 188   2              P_SW1 |= (0x00<<2);
 189   2              break;
 190   2          case SPI_2:
 191   2              P_SW1 |= (0x01<<2);
 192   2              break;
 193   2          case SPI_3:
 194   2              P_SW1 |= (0x02<<2);
 195   2              break;
 196   2          case SPI_4:
 197   2              P_SW1 |= (0x03<<2);
 198   2              break;
 199   2          }
 200   1      }
 201          
 202          
 203          
 204          //--------------------------------------------------------------------------------------------------------
             ------------
 205          //  @brief      spi模式切换函数
 206          //  @param      mode            SPI模式 0：CPOL=0 CPHA=0    1：CPOL=0 CPHA=1   2：CPOL=1 CPHA=0   3：CPOL=
             -1 CPHA=1 //具体细节可自行百度
 207          //  Sample usage:       
 208          //--------------------------------------------------------------------------------------------------------
             ------------
 209          void spi_change_mode(uint8 mode)
 210          {
 211   1        SPCTL &= 0xF7;    //清除SPI极性和相位
 212   1        switch(mode)
 213   1        {
 214   2        case 0:
 215   2          
 216   2          break;
 217   2        case 1:
 218   2          SPCTL |= 0x01<<2;
 219   2          break;
 220   2        case 2:
 221   2          SPCTL |= 0x02<<2;
 222   2          break;
 223   2        case 3:
 224   2          SPCTL |= 0x03<<2;
C51 COMPILER V9.57.0.0   ZF_SPI                                                            04/28/2021 20:58:25 PAGE 5   

 225   2          break;
 226   2        }
 227   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    356    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

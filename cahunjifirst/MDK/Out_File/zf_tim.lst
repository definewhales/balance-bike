C51 COMPILER V9.57.0.0   ZF_TIM                                                            04/28/2021 20:58:25 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE ZF_TIM
OBJECT MODULE PLACED IN .\Out_File\zf_tim.obj
COMPILER INVOKED BY: E:\keil5\anzhuang\C51\BIN\C51.EXE ..\..\Libraries\seekfree_libraries\zf_tim.c LARGE OMF2 OPTIMIZE(8
                    -,SPEED) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;.
                    -.\USER\inc;..\USER\src;..\CODE;.\HARDWORE\Data;.\HARDWORE\DianGan;.\HARDWORE\FusionAngle;.\HARDWORE\BianMaQi;.\HARDWORE\
                    -ShangWeiJi;.\HARDWORE;.\HARDWORE\Balance;.\KaErMan) DEBUG PRINT(.\Out_File\zf_tim.lst) TABS(2) OBJECT(.\Out_File\zf_tim.
                    -obj)

line level    source

   1          /*********************************************************************************************************
             -************
   2           * COPYRIGHT NOTICE
   3           * Copyright (c) 2020,逐飞科技
   4           * All rights reserved.
   5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
   6           *
   7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
   8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
   9           *
  10           * @file          ctime
  11           * @company       成都逐飞科技有限公司
  12           * @author        逐飞科技(QQ790875685)
  13           * @version       查看doc内version文件 版本说明
  14           * @Software    MDK FOR C51 V9.60
  15           * @Target core   STC8H8K64S4
  16           * @Taobao      https://seekfree.taobao.com/
  17           * @date          2020-4-14
  18           *********************************************************************************************************
             -***********/
  19          
  20          
  21          #include "zf_tim.h"
  22          #include "board.h"
  23          
  24          
  25          
  26          //--------------------------------------------------------------------------------------------------------
             ------------
  27          //  @brief      定时器初始化作为外部计数
  28          //  @param      tim_n           选择模块
  29          //  @return     void
  30          //  @since      v1.0
  31          //  Sample usage:               ctimer_count_init(CTIM0_P34);   //初始化定时器0，外部输入为P3.4引脚
  32          //  @note                       串口1使用定时器1作为波特率发生器，
  33          //                串口2使用定时器2作为波特率发生器，
  34          //                串口3使用定时器3作为波特率发生器，
  35          //                串口4使用定时器4作为波特率发生器，
  36          //                              STC8G仅有定时器0-定时器4，这5个定时器。
  37          //                编码器采集数据也需要定时器作为外部计数。
  38          //--------------------------------------------------------------------------------------------------------
             ------------
  39          void ctimer_count_init(CTIMN_enum tim_n)
  40          {
  41   1      
  42   1        switch(tim_n)
  43   1        {
  44   2          case CTIM0_P34:
  45   2          {
  46   3            TL0 = 0; 
  47   3            TH0 = 0; 
C51 COMPILER V9.57.0.0   ZF_TIM                                                            04/28/2021 20:58:25 PAGE 2   

  48   3            TMOD |= 0x04; //外部计数模式
  49   3            TR0 = 1; //启动定时器
  50   3            break;
  51   3          }
  52   2          
  53   2          case CTIM1_P35:
  54   2          {
  55   3            TL1 = 0x00;
  56   3            TH1 = 0x00;
  57   3            TMOD |= 0x40; // 外部计数模式
  58   3            TR1 = 1; // 启动定时器
  59   3            break;
  60   3          }
  61   2          
  62   2          case CTIM2_P12:
  63   2          {
  64   3            T2L = 0x00;
  65   3            T2H = 0x00;
  66   3            AUXR |= 0x18; // 设置外部计数模式并启动定时器
  67   3            break;
  68   3          }
  69   2          
  70   2          case CTIM3_P04:
  71   2          {
  72   3            T3L = 0; 
  73   3            T3H = 0;
  74   3            T4T3M |= 0x0c; // 设置外部计数模式并启动定时器
  75   3            break;
  76   3          }
  77   2          
  78   2          case CTIM4_P06:
  79   2          {
  80   3            T4L = 0;
  81   3            T4H = 0;
  82   3            T4T3M |= 0xc0; // 设置外部计数模式并启动定时器
  83   3            break;
  84   3          }
  85   2        
  86   2        } 
  87   1      } 
  88          
  89          //--------------------------------------------------------------------------------------------------------
             ------------
  90          //  @brief      获取计数数值
  91          //  @param      countch     计数通道号及引脚
  92          //  @return     uint32      返回计数值
  93          //  Sample usage:           num = ctimer_count_read(CTIM0_P34);     
  94          //--------------------------------------------------------------------------------------------------------
             ------------
  95          uint16 ctimer_count_read(CTIMN_enum tim_n)
  96          {
  97   1        uint16 dat;
  98   1        
  99   1        switch(tim_n)
 100   1        {
 101   2          case CTIM0_P34:
 102   2          {
 103   3            dat = (uint8)TH0 << 8;
 104   3            dat = ((uint8)TL0) | dat;
 105   3            break;
 106   3          }
 107   2          case CTIM1_P35:
C51 COMPILER V9.57.0.0   ZF_TIM                                                            04/28/2021 20:58:25 PAGE 3   

 108   2          {
 109   3            dat = (uint8)TH1 << 8;
 110   3            dat = ((uint8)TL1) | dat;
 111   3            break;
 112   3          }
 113   2          case CTIM2_P12:
 114   2          {
 115   3            dat = (uint8)T2H << 8;
 116   3            dat = ((uint8)T2L) | dat;
 117   3            break;
 118   3          }
 119   2          case CTIM3_P04:
 120   2          {
 121   3            dat = (uint8)T3H << 8;
 122   3            dat = ((uint8)T3L) | dat; 
 123   3            break;
 124   3          }
 125   2          case CTIM4_P06:
 126   2          {
 127   3            dat = (uint8)T4H << 8;
 128   3            dat = ((uint8)T4L) | dat;
 129   3            break;
 130   3          }
 131   2          
 132   2        }
 133   1      
 134   1      
 135   1        return dat;
 136   1      }
 137          
 138          
 139          //--------------------------------------------------------------------------------------------------------
             ------------
 140          //  @brief      清除计数数值
 141          //  @param      countch     计数通道号及引脚
 142          //  @return     void      
 143          //  Sample usage:           ctimer_count_clean(CTIM0_P34);     
 144          //--------------------------------------------------------------------------------------------------------
             ------------
 145          void ctimer_count_clean(CTIMN_enum tim_n)
 146          { 
 147   1        switch(tim_n)
 148   1        {
 149   2          case CTIM0_P34:
 150   2          {
 151   3            TR0 = 0;
 152   3            TH0 = 0;
 153   3            TL0 = 0;
 154   3            TR0 = 1;
 155   3            break;
 156   3          }
 157   2          case CTIM1_P35:
 158   2          {
 159   3            TR1 = 0;
 160   3            TH1 = 0;
 161   3            TL1 = 0;
 162   3            TR1 = 1;
 163   3            break;
 164   3          }
 165   2          case CTIM2_P12:
 166   2          {
 167   3            AUXR &= ~(1<<4);
C51 COMPILER V9.57.0.0   ZF_TIM                                                            04/28/2021 20:58:25 PAGE 4   

 168   3            T2H = 0;
 169   3            T2L = 0;
 170   3            AUXR |= 1<<4;
 171   3            break;
 172   3          }
 173   2          case CTIM3_P04:
 174   2          {
 175   3            T4T3M &= ~(1<<3);
 176   3            T3H = 0;
 177   3            T3L = 0;
 178   3            T4T3M |= (1<<3);
 179   3            break;
 180   3          }
 181   2          case CTIM4_P06:
 182   2          {
 183   3            T4T3M &= ~(1<<7);
 184   3            T4H = 0;
 185   3            T4L = 0;
 186   3            T4T3M |= (1<<7);
 187   3            break;
 188   3          }
 189   2        }
 190   1      }
 191          
 192          //--------------------------------------------------------------------------------------------------------
             ------------
 193          //  @brief      定时器周期中断
 194          //  @param      tim_n      定时器通道号
 195          //  @param      time_ms    时间(ms)
 196          //  @return     void      
 197          //  Sample usage:          pit_timer_ms(TIM_0, 10)
 198          //               使用定时器0做周期中断，时间10ms一次。
 199          //--------------------------------------------------------------------------------------------------------
             ------------
 200          void pit_timer_ms(TIMN_enum tim_n,uint16 time_ms)
 201          {
 202   1        uint16 temp;
 203   1        temp = 65536 - (sys_clk / (12 * (1000 / time_ms)));
 204   1        
 205   1        if(TIM_0 == tim_n)
 206   1        {
 207   2          TMOD |= 0x00;   // 模式 0
 208   2          TL0 = temp;   
 209   2          TH0 = temp >> 8;
 210   2          TR0 = 1;    // 启动定时器
 211   2          ET0 = 1;    // 使能定时器中断
 212   2        }
 213   1        else if(TIM_1 == tim_n)
 214   1        {
 215   2          TMOD |= 0x00; // 模式 0
 216   2          TL1 = temp;   
 217   2          TH1 = temp >> 8;
 218   2          TR1 = 1; // 启动定时器
 219   2          ET1 = 1; // 使能定时器中断
 220   2        }
 221   1        else if(TIM_2 == tim_n)
 222   1        {
 223   2          T2L = temp;   
 224   2          T2H = temp >> 8;
 225   2          AUXR |= 0x10; // 启动定时器
 226   2          IE2 |= 0x04; // 使能定时器中断
 227   2        }
C51 COMPILER V9.57.0.0   ZF_TIM                                                            04/28/2021 20:58:25 PAGE 5   

 228   1        else if(TIM_3 == tim_n)
 229   1        {
 230   2          T3L = temp;   
 231   2          T3H = temp >> 8;
 232   2          T4T3M |= 0x08; // 启动定时器
 233   2          IE2 |= 0x20; // 使能定时器中断
 234   2        }
 235   1        else if(TIM_4 == tim_n)
 236   1        {
 237   2          T4L = temp;   
 238   2          T4H = temp >> 8;
 239   2          T4T3M |= 0x80; // 启动定时器
 240   2          IE2 |= 0x40; // 使能定时器中断
 241   2        }
 242   1      }
 243          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    345    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
